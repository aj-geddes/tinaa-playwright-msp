#!/usr/bin/env python3
"""
TINA CLI - Command-line interface for the TINA MCP tool
"""
import argparse
import os
import subprocess
import sys


def main():
    """Main entry point for the TINA CLI"""
    parser = argparse.ArgumentParser(description="TINA - Test Intelligence and Automation")
    subparsers = parser.add_subparsers(dest="command", help="Command to run")
    
    # MCP Server command
    mcp_parser = subparsers.add_parser("mcp", help="Run the MCP server")
    
    # LSP Server command
    lsp_parser = subparsers.add_parser("lsp", help="Run the LSP server")
    lsp_parser.add_argument('--tcp', action='store_true', help='Use TCP server instead of stdio')
    lsp_parser.add_argument('--port', type=int, default=8765, help='Port number for LSP server (TCP mode)')
    
    # Analyze command
    analyze_parser = subparsers.add_parser("analyze", help="Analyze a Playwright test script")
    analyze_parser.add_argument('script', help='Path to the Playwright test script')
    
    args = parser.parse_args()
    
    if args.command == "mcp":
        # Run the MCP server
        from app.main import mcp
        mcp.run()
    elif args.command == "lsp":
        # Run the LSP server
        from playwright_lsp.server import server
        if args.tcp:
            server.start_tcp("localhost", args.port)
        else:
            server.start_io()
    elif args.command == "analyze":
        # Analyze a script
        import asyncio

        from app.main import analyze_script
        
        result = asyncio.run(analyze_script(args.script))
        print(f"Analysis results for {result['script_path']}:")
        print(f"Found {result['issues_found']} issues:")
        for issue in result.get('diagnostics', []):
            print(f"  Line {issue['line']}, Col {issue['character']}: {issue['message']} [{issue['severity']}]")
    else:
        parser.print_help()
        sys.exit(1)

if __name__ == "__main__":
    main()