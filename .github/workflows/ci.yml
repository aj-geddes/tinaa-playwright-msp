# Simplified CI - Focus on Value and Fast Feedback
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Cancel previous runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Quick quality checks - fail fast
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort
      
      - name: Run Ruff
        run: ruff check . --output-format=github
      
      - name: Check Black formatting
        run: black --check --diff .
      
      - name: Check import sorting
        run: isort --check-only --diff .

  # Core testing - what actually matters
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality  # Only run if code quality passes
    strategy:
      matrix:
        python-version: ['3.10', '3.11']  # Only LTS/stable versions
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Install Playwright
        run: |
          python -m playwright install chromium
          python -m playwright install-deps chromium
      
      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=term \
            --cov-fail-under=10 \
            -v
      
      - name: Upload coverage
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false  # Don't fail if codecov is down

  # Documentation - only what's needed
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install MkDocs
        run: |
          pip install mkdocs mkdocs-material
      
      - name: Build documentation
        run: mkdocs build --strict

  # Single status check for branch protection
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality, test, docs]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.docs.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ CI checks failed"
            echo "Quality: ${{ needs.quality.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Docs: ${{ needs.docs.result }}"
            exit 1
          fi