# Dependency Review Workflow
#
# This workflow scans pull requests for dependency changes and identifies
# any dependencies with known vulnerabilities or incompatible licenses

name: 'Dependency Review'

on:
  pull_request:
    paths:
      - 'requirements*.txt'
      - 'setup.py'
      - 'pyproject.toml'
      - 'Dockerfile*'
      - '.github/workflows/*'
      - 'package*.json'

permissions:
  contents: read
  pull-requests: write

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        with:
          # Fail the workflow if high severity vulnerabilities are found
          fail-on-severity: high
          
          # Allow specific licenses (add more as needed)
          allow-licenses: |
            MIT
            Apache-2.0
            BSD-2-Clause
            BSD-3-Clause
            ISC
            Python-2.0
            PSF-2.0
            LGPL-2.1
            LGPL-3.0
            
          # Deny specific licenses that are incompatible
          deny-licenses: |
            GPL-2.0
            GPL-3.0
            AGPL-3.0
            Commons-Clause
            
          # Allow specific advisories to be ignored
          # allow-ghsas: GHSA-xxxx-yyyy-zzzz
          
          # Configure comment behavior
          comment-summary-in-pr: always
          
          # Warn on incompatible licenses but don't fail
          warn-only: false
          
      - name: 'Check Python Dependencies'
        run: |
          pip install pip-audit safety
          
          # Run pip-audit
          echo "Running pip-audit..."
          pip-audit --desc --format json --output pip-audit.json || true
          
          # Run safety check
          echo "Running safety check..."
          safety check --json --output safety.json || true
          
          # Parse and comment results
          python - << 'EOF'
          import json
          import os
          
          vulnerabilities = []
          
          # Parse pip-audit results
          try:
              with open('pip-audit.json', 'r') as f:
                  audit_data = json.load(f)
                  for vuln in audit_data.get('vulnerabilities', []):
                      vulnerabilities.append(f"- **{vuln['name']}**: {vuln['description']}")
          except:
              pass
              
          # Parse safety results  
          try:
              with open('safety.json', 'r') as f:
                  safety_data = json.load(f)
                  for vuln in safety_data.get('vulnerabilities', []):
                      vulnerabilities.append(f"- **{vuln['package']}**: {vuln['vulnerability']}")
          except:
              pass
              
          if vulnerabilities:
              print("⚠️ Found security vulnerabilities:")
              for v in vulnerabilities[:10]:  # Limit to first 10
                  print(v)
              if len(vulnerabilities) > 10:
                  print(f"... and {len(vulnerabilities) - 10} more")
          else:
              print("✅ No security vulnerabilities found")
          EOF
          
      - name: 'License Compatibility Check'
        run: |
          pip install pip-licenses
          
          # Generate license report
          pip-licenses --format=json --output-file=licenses.json
          
          # Check for problematic licenses
          python - << 'EOF'
          import json
          
          with open('licenses.json', 'r') as f:
              licenses = json.load(f)
              
          problematic = []
          for pkg in licenses:
              license_name = pkg.get('License', 'Unknown')
              if any(bad in license_name for bad in ['GPL', 'AGPL', 'Commons']):
                  problematic.append(f"- **{pkg['Name']}**: {license_name}")
                  
          if problematic:
              print("⚠️ Found potentially incompatible licenses:")
              for p in problematic:
                  print(p)
          else:
              print("✅ All licenses appear compatible")
          EOF
