{
  "id": "playwright-patterns",
  "name": "Playwright Design Patterns",
  "description": "Common design patterns and architectural approaches for Playwright test automation",
  "patterns": {
    "page_object_model": {
      "name": "Page Object Model (POM)",
      "description": "Encapsulate page structure and behaviors in classes",
      "benefits": [
        "Improved maintainability",
        "Code reusability",
        "Separation of concerns",
        "Better test readability"
      ],
      "implementation": {
        "basic_structure": {
          "description": "Basic page object structure",
          "code": [
            "// pages/BasePage.ts",
            "export class BasePage {",
            "  constructor(protected page: Page) {}",
            "  ",
            "  async navigate(path: string) {",
            "    await this.page.goto(path);",
            "  }",
            "  ",
            "  async waitForPageLoad() {",
            "    await this.page.waitForLoadState('networkidle');",
            "  }",
            "}",
            "",
            "// pages/LoginPage.ts",
            "export class LoginPage extends BasePage {",
            "  private emailInput = this.page.locator('#email');",
            "  private passwordInput = this.page.locator('#password');",
            "  private submitButton = this.page.locator('button[type=\"submit\"]');",
            "  private errorMessage = this.page.locator('.error-message');",
            "  ",
            "  async navigate() {",
            "    await super.navigate('/login');",
            "  }",
            "  ",
            "  async login(email: string, password: string) {",
            "    await this.emailInput.fill(email);",
            "    await this.passwordInput.fill(password);",
            "    await this.submitButton.click();",
            "  }",
            "  ",
            "  async getErrorMessage() {",
            "    return this.errorMessage.textContent();",
            "  }",
            "}"
          ]
        },
        "advanced_patterns": {
          "description": "Advanced POM patterns",
          "code": [
            "// pages/ProductPage.ts",
            "export class ProductPage extends BasePage {",
            "  async addToCart(productName: string) {",
            "    const product = this.page",
            "      .locator('.product-card')",
            "      .filter({ hasText: productName });",
            "    ",
            "    await product.locator('button:has-text(\"Add to Cart\")').click();",
            "    return new CartComponent(this.page);",
            "  }",
            "  ",
            "  async getProducts() {",
            "    const products = await this.page.locator('.product-card').all();",
            "    return Promise.all(products.map(async (product) => ({",
            "      name: await product.locator('.product-name').textContent(),",
            "      price: await product.locator('.product-price').textContent(),",
            "    })));",
            "  }",
            "}",
            "",
            "// components/CartComponent.ts",
            "export class CartComponent {",
            "  constructor(private page: Page) {}",
            "  ",
            "  private cartIcon = this.page.locator('.cart-icon');",
            "  private cartCount = this.page.locator('.cart-count');",
            "  ",
            "  async getItemCount() {",
            "    const text = await this.cartCount.textContent();",
            "    return parseInt(text || '0');",
            "  }",
            "  ",
            "  async openCart() {",
            "    await this.cartIcon.click();",
            "    return new CartPage(this.page);",
            "  }",
            "}"
          ]
        }
      }
    },
    "fixture_pattern": {
      "name": "Fixture Pattern",
      "description": "Extend Playwright's test fixtures for reusable setup",
      "implementation": {
        "basic_fixtures": {
          "code": [
            "// fixtures/index.ts",
            "import { test as base } from '@playwright/test';",
            "import { LoginPage } from '../pages/LoginPage';",
            "import { DashboardPage } from '../pages/DashboardPage';",
            "",
            "type MyFixtures = {",
            "  loginPage: LoginPage;",
            "  dashboardPage: DashboardPage;",
            "  authenticatedPage: Page;",
            "};",
            "",
            "export const test = base.extend<MyFixtures>({",
            "  loginPage: async ({ page }, use) => {",
            "    const loginPage = new LoginPage(page);",
            "    await use(loginPage);",
            "  },",
            "  ",
            "  dashboardPage: async ({ page }, use) => {",
            "    const dashboardPage = new DashboardPage(page);",
            "    await use(dashboardPage);",
            "  },",
            "  ",
            "  authenticatedPage: async ({ page }, use) => {",
            "    // Perform login",
            "    await page.goto('/login');",
            "    await page.fill('#email', process.env.TEST_EMAIL);",
            "    await page.fill('#password', process.env.TEST_PASSWORD);",
            "    await page.click('button[type=\"submit\"]');",
            "    await page.waitForURL('/dashboard');",
            "    ",
            "    // Use authenticated page",
            "    await use(page);",
            "  },",
            "});",
            "",
            "export { expect } from '@playwright/test';"
          ]
        },
        "complex_fixtures": {
          "code": [
            "// fixtures/data-fixtures.ts",
            "export const test = base.extend<{",
            "  testUser: User;",
            "  testProduct: Product;",
            "  apiClient: APIClient;",
            "}>({",
            "  apiClient: async ({}, use) => {",
            "    const client = new APIClient(process.env.API_URL);",
            "    await use(client);",
            "  },",
            "  ",
            "  testUser: async ({ apiClient }, use) => {",
            "    // Create user before test",
            "    const user = await apiClient.createUser({",
            "      email: `test-${Date.now()}@example.com`,",
            "      password: 'TestPass123!'",
            "    });",
            "    ",
            "    // Use in test",
            "    await use(user);",
            "    ",
            "    // Cleanup after test",
            "    await apiClient.deleteUser(user.id);",
            "  },",
            "  ",
            "  testProduct: async ({ apiClient }, use) => {",
            "    const product = await apiClient.createProduct({",
            "      name: `Test Product ${Date.now()}`,",
            "      price: 99.99",
            "    });",
            "    ",
            "    await use(product);",
            "    await apiClient.deleteProduct(product.id);",
            "  },",
            "});"
          ]
        }
      }
    },
    "screenplay_pattern": {
      "name": "Screenplay Pattern",
      "description": "Actor-centric approach focusing on user goals",
      "implementation": {
        "actors_and_abilities": {
          "code": [
            "// actors/Actor.ts",
            "export class Actor {",
            "  constructor(",
            "    private name: string,",
            "    private abilities: Map<string, any>",
            "  ) {}",
            "  ",
            "  can<T>(ability: new (...args: any[]) => T): T {",
            "    return this.abilities.get(ability.name);",
            "  }",
            "  ",
            "  attemptsTo(...tasks: Task[]) {",
            "    return tasks.reduce(",
            "      (promise, task) => promise.then(() => task.performAs(this)),",
            "      Promise.resolve()",
            "    );",
            "  }",
            "}",
            "",
            "// abilities/BrowseTheWeb.ts",
            "export class BrowseTheWeb {",
            "  constructor(private page: Page) {}",
            "  ",
            "  static using(page: Page) {",
            "    return new BrowseTheWeb(page);",
            "  }",
            "  ",
            "  getPage() {",
            "    return this.page;",
            "  }",
            "}"
          ]
        },
        "tasks_and_interactions": {
          "code": [
            "// tasks/Login.ts",
            "export class Login implements Task {",
            "  constructor(",
            "    private email: string,",
            "    private password: string",
            "  ) {}",
            "  ",
            "  static withCredentials(email: string, password: string) {",
            "    return new Login(email, password);",
            "  }",
            "  ",
            "  async performAs(actor: Actor) {",
            "    const page = actor.can(BrowseTheWeb).getPage();",
            "    ",
            "    await actor.attemptsTo(",
            "      Navigate.to('/login'),",
            "      Fill.field('#email').with(this.email),",
            "      Fill.field('#password').with(this.password),",
            "      Click.on('button[type=\"submit\"]'),",
            "      Wait.forNavigation()",
            "    );",
            "  }",
            "}",
            "",
            "// Usage in test",
            "test('user can login', async ({ page }) => {",
            "  const james = new Actor('James', new Map([",
            "    [BrowseTheWeb.name, BrowseTheWeb.using(page)]",
            "  ]));",
            "  ",
            "  await james.attemptsTo(",
            "    Login.withCredentials('james@example.com', 'password123')",
            "  );",
            "  ",
            "  await james.attemptsTo(",
            "    Verify.that('.welcome-message').contains('Welcome, James')",
            "  );",
            "});"
          ]
        }
      }
    },
    "api_facade_pattern": {
      "name": "API Facade Pattern",
      "description": "Simplify complex API interactions for test setup",
      "implementation": {
        "code": [
          "// api/TestDataBuilder.ts",
          "export class TestDataBuilder {",
          "  constructor(private apiClient: APIClient) {}",
          "  ",
          "  async createUserWithProducts(options?: {",
          "    productCount?: number;",
          "    withOrders?: boolean;",
          "  }) {",
          "    // Create user",
          "    const user = await this.apiClient.post('/users', {",
          "      email: `test-${Date.now()}@example.com`,",
          "      name: 'Test User'",
          "    });",
          "    ",
          "    // Create products",
          "    const products = await Promise.all(",
          "      Array.from({ length: options?.productCount || 3 }, (_, i) =>",
          "        this.apiClient.post('/products', {",
          "          name: `Product ${i + 1}`,",
          "          userId: user.id",
          "        })",
          "      )",
          "    );",
          "    ",
          "    // Create orders if requested",
          "    if (options?.withOrders) {",
          "      await this.apiClient.post('/orders', {",
          "        userId: user.id,",
          "        productIds: products.map(p => p.id)",
          "      });",
          "    }",
          "    ",
          "    return { user, products };",
          "  }",
          "  ",
          "  async cleanupUser(userId: string) {",
          "    // Delete in correct order",
          "    await this.apiClient.delete(`/orders?userId=${userId}`);",
          "    await this.apiClient.delete(`/products?userId=${userId}`);",
          "    await this.apiClient.delete(`/users/${userId}`);",
          "  }",
          "}"
        ]
      }
    },
    "builder_pattern": {
      "name": "Builder Pattern",
      "description": "Construct complex test data step by step",
      "implementation": {
        "code": [
          "// builders/UserBuilder.ts",
          "export class UserBuilder {",
          "  private user: Partial<User> = {",
          "    email: `test-${Date.now()}@example.com`,",
          "    firstName: 'Test',",
          "    lastName: 'User',",
          "    role: 'user'",
          "  };",
          "  ",
          "  withEmail(email: string) {",
          "    this.user.email = email;",
          "    return this;",
          "  }",
          "  ",
          "  withName(firstName: string, lastName: string) {",
          "    this.user.firstName = firstName;",
          "    this.user.lastName = lastName;",
          "    return this;",
          "  }",
          "  ",
          "  asAdmin() {",
          "    this.user.role = 'admin';",
          "    return this;",
          "  }",
          "  ",
          "  withAddress(address: Address) {",
          "    this.user.address = address;",
          "    return this;",
          "  }",
          "  ",
          "  build(): User {",
          "    return this.user as User;",
          "  }",
          "  ",
          "  async create(apiClient: APIClient): Promise<User> {",
          "    const response = await apiClient.post('/users', this.build());",
          "    return response.data;",
          "  }",
          "}",
          "",
          "// Usage",
          "const adminUser = await new UserBuilder()",
          "  .withName('Admin', 'User')",
          "  .asAdmin()",
          "  .withAddress({",
          "    street: '123 Main St',",
          "    city: 'New York',",
          "    country: 'USA'",
          "  })",
          "  .create(apiClient);"
        ]
      }
    },
    "repository_pattern": {
      "name": "Repository Pattern",
      "description": "Abstract data access for tests",
      "implementation": {
        "code": [
          "// repositories/UserRepository.ts",
          "export class UserRepository {",
          "  private users: Map<string, User> = new Map();",
          "  ",
          "  constructor(private apiClient: APIClient) {}",
          "  ",
          "  async create(userData: Partial<User>): Promise<User> {",
          "    const user = await this.apiClient.post('/users', userData);",
          "    this.users.set(user.id, user);",
          "    return user;",
          "  }",
          "  ",
          "  async findById(id: string): Promise<User> {",
          "    if (!this.users.has(id)) {",
          "      const user = await this.apiClient.get(`/users/${id}`);",
          "      this.users.set(id, user);",
          "    }",
          "    return this.users.get(id)!;",
          "  }",
          "  ",
          "  async deleteAll() {",
          "    const deletePromises = Array.from(this.users.keys()).map(id =>",
          "      this.apiClient.delete(`/users/${id}`)",
          "    );",
          "    await Promise.all(deletePromises);",
          "    this.users.clear();",
          "  }",
          "}",
          "",
          "// Test fixture",
          "export const test = base.extend<{",
          "  userRepo: UserRepository;",
          "}>({",
          "  userRepo: async ({ apiClient }, use) => {",
          "    const repo = new UserRepository(apiClient);",
          "    await use(repo);",
          "    await repo.deleteAll(); // Cleanup",
          "  },",
          "});"
        ]
      }
    },
    "strategy_pattern": {
      "name": "Strategy Pattern",
      "description": "Different strategies for similar operations",
      "implementation": {
        "authentication_strategies": {
          "code": [
            "// strategies/AuthStrategy.ts",
            "export interface AuthStrategy {",
            "  authenticate(page: Page): Promise<void>;",
            "}",
            "",
            "export class PasswordAuthStrategy implements AuthStrategy {",
            "  constructor(",
            "    private email: string,",
            "    private password: string",
            "  ) {}",
            "  ",
            "  async authenticate(page: Page) {",
            "    await page.goto('/login');",
            "    await page.fill('#email', this.email);",
            "    await page.fill('#password', this.password);",
            "    await page.click('button[type=\"submit\"]');",
            "    await page.waitForURL('/dashboard');",
            "  }",
            "}",
            "",
            "export class OAuthStrategy implements AuthStrategy {",
            "  constructor(private provider: 'google' | 'github') {}",
            "  ",
            "  async authenticate(page: Page) {",
            "    await page.goto('/login');",
            "    await page.click(`button#${this.provider}-login`);",
            "    // Handle OAuth flow",
            "    // ...",
            "  }",
            "}",
            "",
            "export class TokenAuthStrategy implements AuthStrategy {",
            "  constructor(private token: string) {}",
            "  ",
            "  async authenticate(page: Page) {",
            "    await page.context().addCookies([{",
            "      name: 'auth-token',",
            "      value: this.token,",
            "      domain: 'localhost',",
            "      path: '/'",
            "    }]);",
            "    await page.goto('/dashboard');",
            "  }",
            "}",
            "",
            "// Usage",
            "class AuthenticationManager {",
            "  constructor(private strategy: AuthStrategy) {}",
            "  ",
            "  async login(page: Page) {",
            "    await this.strategy.authenticate(page);",
            "  }",
            "}"
          ]
        }
      }
    },
    "observer_pattern": {
      "name": "Observer Pattern",
      "description": "Monitor and react to test events",
      "implementation": {
        "code": [
          "// observers/TestReporter.ts",
          "export class TestReporter {",
          "  private observers: TestObserver[] = [];",
          "  ",
          "  attach(observer: TestObserver) {",
          "    this.observers.push(observer);",
          "  }",
          "  ",
          "  async notifyTestStart(testName: string) {",
          "    for (const observer of this.observers) {",
          "      await observer.onTestStart(testName);",
          "    }",
          "  }",
          "  ",
          "  async notifyTestComplete(testName: string, status: TestStatus) {",
          "    for (const observer of this.observers) {",
          "      await observer.onTestComplete(testName, status);",
          "    }",
          "  }",
          "}",
          "",
          "// observers/ScreenshotObserver.ts",
          "export class ScreenshotObserver implements TestObserver {",
          "  constructor(private page: Page) {}",
          "  ",
          "  async onTestStart(testName: string) {",
          "    // Take screenshot at test start",
          "    await this.page.screenshot({",
          "      path: `screenshots/${testName}-start.png`",
          "    });",
          "  }",
          "  ",
          "  async onTestComplete(testName: string, status: TestStatus) {",
          "    if (status === 'failed') {",
          "      await this.page.screenshot({",
          "        path: `screenshots/${testName}-failure.png`,",
          "        fullPage: true",
          "      });",
          "    }",
          "  }",
          "}",
          "",
          "// observers/MetricsObserver.ts",
          "export class MetricsObserver implements TestObserver {",
          "  private metrics: Map<string, TestMetrics> = new Map();",
          "  ",
          "  async onTestStart(testName: string) {",
          "    this.metrics.set(testName, {",
          "      startTime: Date.now(),",
          "      memoryUsage: process.memoryUsage()",
          "    });",
          "  }",
          "  ",
          "  async onTestComplete(testName: string, status: TestStatus) {",
          "    const metric = this.metrics.get(testName);",
          "    if (metric) {",
          "      metric.duration = Date.now() - metric.startTime;",
          "      metric.status = status;",
          "      console.log(`Test ${testName} took ${metric.duration}ms`);",
          "    }",
          "  }",
          "}"
        ]
      }
    },
    "chain_of_responsibility": {
      "name": "Chain of Responsibility Pattern",
      "description": "Handle test setup through a chain of handlers",
      "implementation": {
        "code": [
          "// handlers/SetupHandler.ts",
          "export abstract class SetupHandler {",
          "  protected nextHandler?: SetupHandler;",
          "  ",
          "  setNext(handler: SetupHandler): SetupHandler {",
          "    this.nextHandler = handler;",
          "    return handler;",
          "  }",
          "  ",
          "  async handle(context: TestContext): Promise<void> {",
          "    await this.doHandle(context);",
          "    if (this.nextHandler) {",
          "      await this.nextHandler.handle(context);",
          "    }",
          "  }",
          "  ",
          "  protected abstract doHandle(context: TestContext): Promise<void>;",
          "}",
          "",
          "// handlers/AuthenticationHandler.ts",
          "export class AuthenticationHandler extends SetupHandler {",
          "  protected async doHandle(context: TestContext) {",
          "    if (context.requiresAuth) {",
          "      await context.page.goto('/login');",
          "      // Perform login",
          "      context.isAuthenticated = true;",
          "    }",
          "  }",
          "}",
          "",
          "// handlers/DataSetupHandler.ts",
          "export class DataSetupHandler extends SetupHandler {",
          "  protected async doHandle(context: TestContext) {",
          "    if (context.testData) {",
          "      // Create test data via API",
          "      context.createdData = await this.createTestData(context.testData);",
          "    }",
          "  }",
          "}",
          "",
          "// Usage",
          "const setupChain = new AuthenticationHandler();",
          "setupChain",
          "  .setNext(new DataSetupHandler())",
          "  .setNext(new NavigationHandler());",
          "",
          "await setupChain.handle(testContext);"
        ]
      }
    }
  },
  "architectural_patterns": {
    "layered_architecture": {
      "name": "Layered Test Architecture",
      "layers": [
        {
          "name": "Test Layer",
          "description": "Test specifications and scenarios",
          "responsibilities": ["Test logic", "Assertions", "Test data"]
        },
        {
          "name": "Page Object Layer",
          "description": "Page representations and interactions",
          "responsibilities": ["Element locators", "Page actions", "Page state"]
        },
        {
          "name": "Component Layer",
          "description": "Reusable UI components",
          "responsibilities": ["Common UI patterns", "Shared behaviors"]
        },
        {
          "name": "API Layer",
          "description": "Backend interactions",
          "responsibilities": ["Test data creation", "State verification", "Cleanup"]
        },
        {
          "name": "Utility Layer",
          "description": "Common utilities and helpers",
          "responsibilities": ["Data generation", "File operations", "Formatting"]
        }
      ]
    }
  },
  "best_practices": [
    "Choose patterns that match your team's needs",
    "Don't over-engineer - start simple",
    "Maintain consistency across the test suite",
    "Document pattern usage for team members",
    "Refactor incrementally as patterns emerge",
    "Consider maintenance overhead of each pattern",
    "Mix patterns where appropriate",
    "Keep test code as simple as possible"
  ]
}