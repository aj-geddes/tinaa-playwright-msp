{
  "id": "state-manager",
  "name": "Authentication & Storage State Manager",
  "description": "Manage browser storage state for authentication and session persistence",
  "type": "state-management",
  "concepts": {
    "storage_state": {
      "description": "Saves cookies, localStorage, and sessionStorage",
      "use_cases": [
        "Skip login in tests",
        "Preserve user sessions",
        "Test different user roles",
        "Speed up test execution"
      ]
    }
  },
  "authentication_setup": {
    "global_setup": {
      "description": "Authenticate once for all tests",
      "file": "global-setup.ts",
      "code": [
        "import { chromium, FullConfig } from '@playwright/test';",
        "",
        "async function globalSetup(config: FullConfig) {",
        "  const { baseURL, storageState } = config.projects[0].use;",
        "  const browser = await chromium.launch();",
        "  const page = await browser.newPage();",
        "  ",
        "  // Navigate to login page",
        "  await page.goto(baseURL + '/login');",
        "  ",
        "  // Perform login",
        "  await page.fill('#username', process.env.TEST_USERNAME!);",
        "  await page.fill('#password', process.env.TEST_PASSWORD!);",
        "  await page.click('#login-button');",
        "  ",
        "  // Wait for login to complete",
        "  await page.waitForURL(baseURL + '/dashboard');",
        "  ",
        "  // Save storage state",
        "  await page.context().storageState({ path: storageState as string });",
        "  await browser.close();",
        "}",
        "",
        "export default globalSetup;"
      ]
    },
    "config_setup": {
      "description": "Configure storage state in playwright.config.ts",
      "code": [
        "export default defineConfig({",
        "  globalSetup: require.resolve('./global-setup'),",
        "  use: {",
        "    baseURL: 'http://localhost:3000',",
        "    storageState: 'playwright/.auth/user.json',",
        "  },",
        "});"
      ]
    }
  },
  "multiple_roles": {
    "description": "Setup different user roles",
    "setup": {
      "admin_setup": [
        "// global-setup-admin.ts",
        "async function setupAdmin() {",
        "  // Login as admin",
        "  await page.fill('#username', 'admin@example.com');",
        "  await page.fill('#password', process.env.ADMIN_PASSWORD);",
        "  await page.context().storageState({",
        "    path: 'playwright/.auth/admin.json'",
        "  });",
        "}"
      ],
      "user_setup": [
        "// global-setup-user.ts",
        "async function setupUser() {",
        "  // Login as regular user",
        "  await page.fill('#username', 'user@example.com');",
        "  await page.fill('#password', process.env.USER_PASSWORD);",
        "  await page.context().storageState({",
        "    path: 'playwright/.auth/user.json'",
        "  });",
        "}"
      ]
    },
    "projects_config": [
      "export default defineConfig({",
      "  projects: [",
      "    {",
      "      name: 'admin-tests',",
      "      use: {",
      "        storageState: 'playwright/.auth/admin.json',",
      "      },",
      "    },",
      "    {",
      "      name: 'user-tests',",
      "      use: {",
      "        storageState: 'playwright/.auth/user.json',",
      "      },",
      "    },",
      "    {",
      "      name: 'unauthenticated',",
      "      use: {",
      "        storageState: undefined,",
      "      },",
      "    },",
      "  ],",
      "});"
    ]
  },
  "api_authentication": {
    "description": "Use API for faster authentication",
    "code": [
      "async function apiLogin(username: string, password: string) {",
      "  const response = await fetch('https://api.example.com/login', {",
      "    method: 'POST',",
      "    headers: { 'Content-Type': 'application/json' },",
      "    body: JSON.stringify({ username, password }),",
      "  });",
      "  ",
      "  const { token } = await response.json();",
      "  return token;",
      "}",
      "",
      "async function globalSetup() {",
      "  const token = await apiLogin('user@example.com', 'password');",
      "  ",
      "  // Create browser context with token",
      "  const browser = await chromium.launch();",
      "  const context = await browser.newContext();",
      "  ",
      "  // Set token in localStorage or as cookie",
      "  await context.addCookies([{",
      "    name: 'auth-token',",
      "    value: token,",
      "    domain: 'example.com',",
      "    path: '/',",
      "  }]);",
      "  ",
      "  await context.storageState({ path: 'playwright/.auth/user.json' });",
      "  await browser.close();",
      "}"
    ]
  },
  "session_management": {
    "preserve_session": {
      "description": "Keep session between test runs",
      "code": [
        "test.describe('Session tests', () => {",
        "  let context;",
        "  ",
        "  test.beforeAll(async ({ browser }) => {",
        "    context = await browser.newContext({",
        "      storageState: 'playwright/.auth/user.json'",
        "    });",
        "  });",
        "  ",
        "  test.afterAll(async () => {",
        "    await context.close();",
        "  });",
        "  ",
        "  test('test 1', async () => {",
        "    const page = await context.newPage();",
        "    // Test with preserved session",
        "  });",
        "});"
      ]
    },
    "clear_session": {
      "description": "Clear storage state in test",
      "code": [
        "test('logout test', async ({ context, page }) => {",
        "  // Clear all cookies",
        "  await context.clearCookies();",
        "  ",
        "  // Clear localStorage",
        "  await page.evaluate(() => localStorage.clear());",
        "  ",
        "  // Clear sessionStorage",
        "  await page.evaluate(() => sessionStorage.clear());",
        "});"
      ]
    }
  },
  "utilities": {
    "save_state": [
      "// Save current state to file",
      "await page.context().storageState({",
      "  path: 'current-state.json'",
      "});"
    ],
    "load_state": [
      "// Create context with saved state",
      "const context = await browser.newContext({",
      "  storageState: 'saved-state.json'",
      "});"
    ],
    "inspect_state": [
      "// Get current cookies",
      "const cookies = await context.cookies();",
      "",
      "// Get localStorage",
      "const localStorage = await page.evaluate(() => {",
      "  return Object.entries(localStorage);",
      "});"
    ]
  },
  "best_practices": [
    "Store auth state files in .gitignore",
    "Use environment variables for credentials",
    "Implement token refresh logic",
    "Create separate auth states for different test suites",
    "Validate auth state before running tests",
    "Handle auth expiration gracefully",
    "Use API authentication when possible for speed"
  ]
}