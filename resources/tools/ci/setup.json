{
  "id": "ci-integration",
  "name": "CI/CD Integration Setup",
  "description": "Configure Playwright tests for various CI/CD platforms",
  "type": "ci-cd",
  "platforms": {
    "github_actions": {
      "name": "GitHub Actions",
      "file": ".github/workflows/playwright.yml",
      "configuration": {
        "basic": {
          "name": "Basic Playwright Tests",
          "yaml": [
            "name: Playwright Tests",
            "on:",
            "  push:",
            "    branches: [ main, master ]",
            "  pull_request:",
            "    branches: [ main, master ]",
            "jobs:",
            "  test:",
            "    timeout-minutes: 60",
            "    runs-on: ubuntu-latest",
            "    steps:",
            "    - uses: actions/checkout@v3",
            "    - uses: actions/setup-node@v3",
            "      with:",
            "        node-version: 18",
            "    - name: Install dependencies",
            "      run: npm ci",
            "    - name: Install Playwright Browsers",
            "      run: npx playwright install --with-deps",
            "    - name: Run Playwright tests",
            "      run: npx playwright test",
            "    - uses: actions/upload-artifact@v3",
            "      if: always()",
            "      with:",
            "        name: playwright-report",
            "        path: playwright-report/",
            "        retention-days: 30"
          ]
        },
        "advanced": {
          "name": "Advanced with Matrix and Sharding",
          "yaml": [
            "name: Playwright Tests",
            "on:",
            "  push:",
            "    branches: [ main, master ]",
            "  pull_request:",
            "    branches: [ main, master ]",
            "jobs:",
            "  test:",
            "    timeout-minutes: 60",
            "    runs-on: ${{ matrix.os }}",
            "    strategy:",
            "      fail-fast: false",
            "      matrix:",
            "        os: [ubuntu-latest, windows-latest, macos-latest]",
            "        browser: [chromium, firefox, webkit]",
            "        shard: [1/4, 2/4, 3/4, 4/4]",
            "    steps:",
            "    - uses: actions/checkout@v3",
            "    - uses: actions/setup-node@v3",
            "      with:",
            "        node-version: 18",
            "        cache: 'npm'",
            "    - name: Install dependencies",
            "      run: npm ci",
            "    - name: Install Playwright Browsers",
            "      run: npx playwright install --with-deps ${{ matrix.browser }}",
            "    - name: Run Playwright tests",
            "      run: npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}",
            "    - name: Upload test results",
            "      if: always()",
            "      uses: actions/upload-artifact@v3",
            "      with:",
            "        name: test-results-${{ matrix.os }}-${{ matrix.browser }}-${{ matrix.shard }}",
            "        path: test-results/"
          ]
        }
      }
    },
    "jenkins": {
      "name": "Jenkins Pipeline",
      "file": "Jenkinsfile",
      "configuration": {
        "declarative": [
          "pipeline {",
          "    agent {",
          "        docker {",
          "            image 'mcr.microsoft.com/playwright:v1.40.0-jammy'",
          "        }",
          "    }",
          "    stages {",
          "        stage('Install') {",
          "            steps {",
          "                sh 'npm ci'",
          "                sh 'npx playwright install'",
          "            }",
          "        }",
          "        stage('Test') {",
          "            steps {",
          "                sh 'npx playwright test'",
          "            }",
          "        }",
          "    }",
          "    post {",
          "        always {",
          "            publishHTML([",
          "                allowMissing: false,",
          "                alwaysLinkToLastBuild: true,",
          "                keepAll: true,",
          "                reportDir: 'playwright-report',",
          "                reportFiles: 'index.html',",
          "                reportName: 'Playwright Report'",
          "            ])",
          "        }",
          "    }",
          "}"
        ]
      }
    },
    "azure_devops": {
      "name": "Azure DevOps Pipeline",
      "file": "azure-pipelines.yml",
      "configuration": [
        "trigger:",
        "- main",
        "",
        "pool:",
        "  vmImage: 'ubuntu-latest'",
        "",
        "steps:",
        "- task: NodeTool@0",
        "  inputs:",
        "    versionSpec: '18.x'",
        "  displayName: 'Install Node.js'",
        "",
        "- script: npm ci",
        "  displayName: 'Install dependencies'",
        "",
        "- script: npx playwright install --with-deps",
        "  displayName: 'Install Playwright browsers'",
        "",
        "- script: npx playwright test",
        "  displayName: 'Run Playwright tests'",
        "",
        "- task: PublishTestResults@2",
        "  condition: succeededOrFailed()",
        "  inputs:",
        "    testResultsFiles: 'test-results/junit.xml'",
        "    testRunTitle: 'Playwright Tests'",
        "",
        "- task: PublishPipelineArtifact@1",
        "  condition: always()",
        "  inputs:",
        "    targetPath: 'playwright-report'",
        "    artifact: 'playwright-report'"
      ]
    },
    "gitlab": {
      "name": "GitLab CI",
      "file": ".gitlab-ci.yml",
      "configuration": [
        "image: mcr.microsoft.com/playwright:v1.40.0-jammy",
        "",
        "stages:",
        "  - test",
        "",
        "cache:",
        "  paths:",
        "    - node_modules/",
        "",
        "before_script:",
        "  - npm ci",
        "",
        "playwright:",
        "  stage: test",
        "  script:",
        "    - npx playwright test",
        "  artifacts:",
        "    when: always",
        "    paths:",
        "      - playwright-report/",
        "    expire_in: 1 week",
        "    reports:",
        "      junit: test-results/junit.xml"
      ]
    }
  },
  "docker_support": {
    "dockerfile": [
      "FROM mcr.microsoft.com/playwright:v1.40.0-jammy",
      "",
      "WORKDIR /app",
      "",
      "COPY package*.json ./",
      "RUN npm ci",
      "",
      "COPY . .",
      "",
      "RUN npx playwright install",
      "",
      "CMD [\"npx\", \"playwright\", \"test\"]"
    ],
    "docker_compose": [
      "version: '3.8'",
      "services:",
      "  playwright:",
      "    build: .",
      "    volumes:",
      "      - ./test-results:/app/test-results",
      "      - ./playwright-report:/app/playwright-report",
      "    environment:",
      "      - CI=true"
    ]
  },
  "environment_variables": {
    "CI": "Set to true in CI environments",
    "PLAYWRIGHT_BROWSERS_PATH": "Custom browser installation path",
    "PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD": "Skip browser download if pre-installed",
    "DEBUG": "Enable debug logs (pw:api)",
    "PWDEBUG": "Enable headed mode and inspector"
  },
  "best_practices": [
    "Use reporter configuration for CI-friendly output",
    "Set appropriate timeouts for CI environments",
    "Configure retries for flaky tests",
    "Use artifacts for test reports and traces",
    "Implement test sharding for faster execution",
    "Cache dependencies between runs",
    "Use matrix builds for cross-browser testing"
  ]
}