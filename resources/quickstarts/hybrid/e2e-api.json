{
  "id": "e2e-api-hybrid",
  "name": "Hybrid E2E & API Testing Quickstart",
  "description": "Combine UI and API testing for comprehensive test coverage",
  "prerequisites": [
    "Understanding of both UI and API testing",
    "Playwright test runner knowledge",
    "Basic async/await JavaScript"
  ],
  "concepts": {
    "hybrid_testing": "Combining UI interactions with API calls for efficient testing",
    "test_optimization": "Use API for setup/teardown, UI for user journeys",
    "data_validation": "Verify UI changes are reflected in backend"
  },
  "steps": [
    {
      "step": 1,
      "title": "API setup for UI tests",
      "file": "tests/hybrid-setup.spec.ts",
      "code": [
        "import { test, expect } from '@playwright/test';",
        "",
        "test.describe('User Dashboard Tests', () => {",
        "  let userId;",
        "  let authToken;",
        "  ",
        "  test.beforeEach(async ({ request, page }) => {",
        "    // Create test user via API",
        "    const userResponse = await request.post('/api/users', {",
        "      data: {",
        "        name: 'Test User',",
        "        email: `test-${Date.now()}@example.com`,",
        "        password: 'Test123!'",
        "      }",
        "    });",
        "    ",
        "    const user = await userResponse.json();",
        "    userId = user.id;",
        "    ",
        "    // Get auth token via API",
        "    const authResponse = await request.post('/api/auth/login', {",
        "      data: {",
        "        email: user.email,",
        "        password: 'Test123!'",
        "      }",
        "    });",
        "    ",
        "    const { token } = await authResponse.json();",
        "    authToken = token;",
        "    ",
        "    // Set auth cookie for UI",
        "    await page.context().addCookies([{",
        "      name: 'auth-token',",
        "      value: token,",
        "      domain: 'localhost',",
        "      path: '/'",
        "    }]);",
        "  });",
        "  ",
        "  test.afterEach(async ({ request }) => {",
        "    // Cleanup via API",
        "    if (userId) {",
        "      await request.delete(`/api/users/${userId}`, {",
        "        headers: {",
        "          'Authorization': `Bearer ${authToken}`",
        "        }",
        "      });",
        "    }",
        "  });",
        "  ",
        "  test('user can update profile', async ({ page, request }) => {",
        "    // Navigate to profile page",
        "    await page.goto('/profile');",
        "    ",
        "    // Update via UI",
        "    await page.fill('#name', 'Updated Name');",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    // Verify via API",
        "    const response = await request.get(`/api/users/${userId}`, {",
        "      headers: {",
        "        'Authorization': `Bearer ${authToken}`",
        "      }",
        "    });",
        "    ",
        "    const updatedUser = await response.json();",
        "    expect(updatedUser.name).toBe('Updated Name');",
        "  });",
        "});"
      ]
    },
    {
      "step": 2,
      "title": "Data seeding patterns",
      "file": "fixtures/data-seeder.ts",
      "code": [
        "export class DataSeeder {",
        "  constructor(private request: APIRequestContext) {}",
        "  ",
        "  async createProduct(data: Partial<Product> = {}) {",
        "    const product = {",
        "      name: data.name || `Product ${Date.now()}`,",
        "      price: data.price || 99.99,",
        "      category: data.category || 'Electronics',",
        "      inStock: data.inStock ?? true",
        "    };",
        "    ",
        "    const response = await this.request.post('/api/products', {",
        "      data: product",
        "    });",
        "    ",
        "    return response.json();",
        "  }",
        "  ",
        "  async createOrder(userId: string, products: string[]) {",
        "    const response = await this.request.post('/api/orders', {",
        "      data: {",
        "        userId,",
        "        products,",
        "        status: 'pending'",
        "      }",
        "    });",
        "    ",
        "    return response.json();",
        "  }",
        "  ",
        "  async cleanup(resources: { type: string; id: string }[]) {",
        "    for (const resource of resources) {",
        "      await this.request.delete(`/api/${resource.type}/${resource.id}`);",
        "    }",
        "  }",
        "}"
      ]
    },
    {
      "step": 3,
      "title": "E2E checkout flow",
      "file": "tests/checkout-flow.spec.ts",
      "code": [
        "import { test, expect } from '@playwright/test';",
        "import { DataSeeder } from '../fixtures/data-seeder';",
        "",
        "test('complete checkout flow', async ({ page, request }) => {",
        "  const seeder = new DataSeeder(request);",
        "  const createdResources = [];",
        "  ",
        "  // Create test data",
        "  const product1 = await seeder.createProduct({",
        "    name: 'Laptop',",
        "    price: 999.99",
        "  });",
        "  createdResources.push({ type: 'products', id: product1.id });",
        "  ",
        "  const product2 = await seeder.createProduct({",
        "    name: 'Mouse',",
        "    price: 29.99",
        "  });",
        "  createdResources.push({ type: 'products', id: product2.id });",
        "  ",
        "  // UI Testing",
        "  await page.goto('/shop');",
        "  ",
        "  // Add products to cart",
        "  await page.locator(`[data-product-id=\"${product1.id}\"]`)",
        "    .getByRole('button', { name: 'Add to Cart' })",
        "    .click();",
        "    ",
        "  await page.locator(`[data-product-id=\"${product2.id}\"]`)",
        "    .getByRole('button', { name: 'Add to Cart' })",
        "    .click();",
        "  ",
        "  // Verify cart via API",
        "  const cartResponse = await request.get('/api/cart');",
        "  const cart = await cartResponse.json();",
        "  expect(cart.items).toHaveLength(2);",
        "  expect(cart.total).toBe(1029.98);",
        "  ",
        "  // Continue checkout",
        "  await page.goto('/checkout');",
        "  await page.fill('#email', 'test@example.com');",
        "  await page.fill('#card-number', '4242424242424242');",
        "  await page.fill('#expiry', '12/25');",
        "  await page.fill('#cvc', '123');",
        "  ",
        "  // Complete order",
        "  await page.click('button[type=\"submit\"]');",
        "  ",
        "  // Wait for success page",
        "  await page.waitForURL('**/order-confirmation');",
        "  ",
        "  // Verify order via API",
        "  const orderId = page.url().split('/').pop();",
        "  const orderResponse = await request.get(`/api/orders/${orderId}`);",
        "  const order = await orderResponse.json();",
        "  ",
        "  expect(order.status).toBe('completed');",
        "  expect(order.items).toHaveLength(2);",
        "  ",
        "  // Cleanup",
        "  createdResources.push({ type: 'orders', id: orderId });",
        "  await seeder.cleanup(createdResources);",
        "});"
      ]
    },
    {
      "step": 4,
      "title": "Parallel UI and API validation",
      "file": "tests/parallel-validation.spec.ts",
      "code": [
        "test('real-time updates', async ({ page, request }) => {",
        "  await page.goto('/dashboard');",
        "  ",
        "  // Start monitoring API",
        "  const apiPromise = request.get('/api/notifications/stream', {",
        "    timeout: 0 // No timeout for streaming",
        "  });",
        "  ",
        "  // Trigger action in UI",
        "  await page.click('button#generate-report');",
        "  ",
        "  // Wait for both UI update and API response",
        "  await Promise.all([",
        "    // UI shows completion",
        "    page.waitForSelector('.report-complete', { state: 'visible' }),",
        "    ",
        "    // API confirms completion",
        "    apiPromise.then(async response => {",
        "      const data = await response.json();",
        "      expect(data.status).toBe('completed');",
        "    })",
        "  ]);",
        "});"
      ]
    },
    {
      "step": 5,
      "title": "State synchronization",
      "file": "tests/state-sync.spec.ts",
      "code": [
        "test('multi-tab synchronization', async ({ browser, request }) => {",
        "  const context = await browser.newContext();",
        "  const page1 = await context.newPage();",
        "  const page2 = await context.newPage();",
        "  ",
        "  // Open same page in two tabs",
        "  await page1.goto('/collaborative-editor');",
        "  await page2.goto('/collaborative-editor');",
        "  ",
        "  // Make change in first tab",
        "  await page1.fill('#editor', 'Hello from tab 1');",
        "  ",
        "  // Verify change appears in second tab",
        "  await expect(page2.locator('#editor')).toHaveValue('Hello from tab 1');",
        "  ",
        "  // Verify via API",
        "  const response = await request.get('/api/documents/current');",
        "  const document = await response.json();",
        "  expect(document.content).toBe('Hello from tab 1');",
        "  ",
        "  await context.close();",
        "});"
      ]
    }
  ],
  "patterns": {
    "api_first_testing": {
      "description": "Use API for complex setup, UI for critical paths",
      "benefits": [
        "Faster test execution",
        "More stable tests",
        "Better separation of concerns",
        "Easier debugging"
      ],
      "example": [
        "// Bad: Creating 50 products via UI",
        "for (let i = 0; i < 50; i++) {",
        "  await page.goto('/admin/products/new');",
        "  await page.fill('#name', `Product ${i}`);",
        "  await page.click('button[type=\"submit\"]');",
        "}",
        "",
        "// Good: Create via API, test UI with one",
        "const products = await Promise.all(",
        "  Array.from({ length: 50 }, (_, i) =>",
        "    request.post('/api/products', {",
        "      data: { name: `Product ${i}` }",
        "    })",
        "  )",
        ");",
        "",
        "await page.goto('/products');",
        "await expect(page.locator('.product-card')).toHaveCount(50);"
      ]
    },
    "api_verification": {
      "description": "Verify UI actions through API",
      "code": [
        "async function verifyUIAction(page, request, action, verification) {",
        "  // Perform UI action",
        "  await action(page);",
        "  ",
        "  // Wait a bit for backend processing",
        "  await page.waitForTimeout(500);",
        "  ",
        "  // Verify via API",
        "  const response = await request.get(verification.endpoint);",
        "  const data = await response.json();",
        "  ",
        "  expect(data).toMatchObject(verification.expected);",
        "}"
      ]
    }
  },
  "best_practices": [
    "Use API for test data setup and teardown",
    "Verify critical UI actions with API calls",
    "Test API directly for business logic",
    "Use UI tests for user journeys",
    "Implement proper test isolation",
    "Share authentication between UI and API contexts",
    "Use fixtures for common setup patterns",
    "Monitor both frontend and backend errors",
    "Implement retry strategies for flaky integrations"
  ],
  "common_scenarios": {
    "shopping_cart": "API to add items, UI to checkout",
    "user_registration": "UI for form, API to verify account created",
    "file_upload": "UI to upload, API to verify processing",
    "search": "API to index data, UI to test search experience",
    "notifications": "API to trigger, UI to verify display"
  }
}