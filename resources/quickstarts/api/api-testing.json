{
  "id": "api-testing",
  "name": "API Testing Quickstart",
  "description": "Test REST APIs and GraphQL endpoints with Playwright",
  "prerequisites": [
    "Basic understanding of REST/GraphQL",
    "Knowledge of HTTP methods and status codes",
    "JSON/API response structure familiarity"
  ],
  "steps": [
    {
      "step": 1,
      "title": "Basic API request",
      "file": "tests/api-basic.spec.ts",
      "code": [
        "import { test, expect } from '@playwright/test';",
        "",
        "test('GET request', async ({ request }) => {",
        "  const response = await request.get('https://api.example.com/users');",
        "  ",
        "  expect(response.ok()).toBeTruthy();",
        "  expect(response.status()).toBe(200);",
        "  ",
        "  const users = await response.json();",
        "  expect(users).toHaveLength(10);",
        "  expect(users[0]).toHaveProperty('id');",
        "});"
      ]
    },
    {
      "step": 2,
      "title": "POST request with data",
      "file": "tests/api-post.spec.ts",
      "code": [
        "test('create user', async ({ request }) => {",
        "  const newUser = {",
        "    name: 'John Doe',",
        "    email: 'john@example.com',",
        "    role: 'user'",
        "  };",
        "  ",
        "  const response = await request.post('https://api.example.com/users', {",
        "    data: newUser",
        "  });",
        "  ",
        "  expect(response.status()).toBe(201);",
        "  ",
        "  const created = await response.json();",
        "  expect(created).toMatchObject(newUser);",
        "  expect(created).toHaveProperty('id');",
        "});"
      ]
    },
    {
      "step": 3,
      "title": "API context configuration",
      "file": "playwright.config.ts",
      "code": [
        "export default defineConfig({",
        "  use: {",
        "    // Base URL for API requests",
        "    baseURL: 'https://api.example.com',",
        "    ",
        "    // Extra HTTP headers",
        "    extraHTTPHeaders: {",
        "      'Accept': 'application/json',",
        "      'X-API-Version': 'v1'",
        "    },",
        "  },",
        "});"
      ]
    },
    {
      "step": 4,
      "title": "Authentication setup",
      "file": "tests/api-auth.spec.ts",
      "code": [
        "test.describe('Authenticated API tests', () => {",
        "  let apiContext;",
        "  let authToken;",
        "  ",
        "  test.beforeAll(async ({ playwright }) => {",
        "    // Get auth token",
        "    const response = await playwright.request.newContext().post('/auth/login', {",
        "      data: {",
        "        username: 'testuser',",
        "        password: 'password123'",
        "      }",
        "    });",
        "    ",
        "    const { token } = await response.json();",
        "    authToken = token;",
        "    ",
        "    // Create authenticated context",
        "    apiContext = await playwright.request.newContext({",
        "      baseURL: 'https://api.example.com',",
        "      extraHTTPHeaders: {",
        "        'Authorization': `Bearer ${token}`,",
        "      },",
        "    });",
        "  });",
        "  ",
        "  test('protected endpoint', async () => {",
        "    const response = await apiContext.get('/users/profile');",
        "    expect(response.status()).toBe(200);",
        "  });",
        "});"
      ]
    },
    {
      "step": 5,
      "title": "GraphQL testing",
      "file": "tests/graphql.spec.ts",
      "code": [
        "test('GraphQL query', async ({ request }) => {",
        "  const query = `",
        "    query GetUser($id: ID!) {",
        "      user(id: $id) {",
        "        id",
        "        name",
        "        email",
        "        posts {",
        "          title",
        "          createdAt",
        "        }",
        "      }",
        "    }",
        "  `;",
        "  ",
        "  const response = await request.post('/graphql', {",
        "    data: {",
        "      query,",
        "      variables: { id: '123' }",
        "    }",
        "  });",
        "  ",
        "  const { data, errors } = await response.json();",
        "  expect(errors).toBeUndefined();",
        "  expect(data.user.name).toBe('John Doe');",
        "});"
      ]
    }
  ],
  "advanced_patterns": {
    "request_interception": {
      "description": "Intercept and modify API requests",
      "code": [
        "test('mock API response', async ({ page }) => {",
        "  // Intercept API call",
        "  await page.route('**/api/users', route => {",
        "    route.fulfill({",
        "      status: 200,",
        "      contentType: 'application/json',",
        "      body: JSON.stringify([",
        "        { id: 1, name: 'Mocked User' }",
        "      ])",
        "    });",
        "  });",
        "  ",
        "  await page.goto('/users');",
        "  await expect(page.locator('.user-name')).toContainText('Mocked User');",
        "});"
      ]
    },
    "api_mocking": {
      "description": "Mock entire API for UI tests",
      "code": [
        "// Mock service worker approach",
        "import { test as base } from '@playwright/test';",
        "import { MockServiceWorker } from 'playwright-msw';",
        "",
        "const test = base.extend({",
        "  worker: [async ({ page }, use) => {",
        "    const worker = await MockServiceWorker.create(page);",
        "    await use(worker);",
        "  }, { auto: true }],",
        "});",
        "",
        "test('with mocked API', async ({ page, worker }) => {",
        "  await worker.use(",
        "    rest.get('/api/users', (req, res, ctx) => {",
        "      return res(ctx.json([{ id: 1, name: 'Test User' }]));",
        "    })",
        "  );",
        "  ",
        "  await page.goto('/');",
        "  // Test with mocked data",
        "});"
      ]
    },
    "response_validation": {
      "description": "Validate API responses with schemas",
      "code": [
        "import { expect } from '@playwright/test';",
        "import Ajv from 'ajv';",
        "",
        "const ajv = new Ajv();",
        "const userSchema = {",
        "  type: 'object',",
        "  properties: {",
        "    id: { type: 'number' },",
        "    name: { type: 'string' },",
        "    email: { type: 'string', format: 'email' }",
        "  },",
        "  required: ['id', 'name', 'email']",
        "};",
        "",
        "test('validate response schema', async ({ request }) => {",
        "  const response = await request.get('/users/1');",
        "  const user = await response.json();",
        "  ",
        "  const validate = ajv.compile(userSchema);",
        "  const valid = validate(user);",
        "  ",
        "  expect(valid).toBeTruthy();",
        "  expect(validate.errors).toBeNull();",
        "});"
      ]
    },
    "performance_testing": {
      "description": "Measure API performance",
      "code": [
        "test('API performance', async ({ request }) => {",
        "  const startTime = Date.now();",
        "  ",
        "  const response = await request.get('/users');",
        "  ",
        "  const duration = Date.now() - startTime;",
        "  ",
        "  expect(response.status()).toBe(200);",
        "  expect(duration).toBeLessThan(1000); // Under 1 second",
        "  ",
        "  // Check response headers",
        "  const headers = response.headers();",
        "  expect(headers['content-type']).toContain('application/json');",
        "  expect(headers['cache-control']).toBeDefined();",
        "});"
      ]
    }
  },
  "error_handling": {
    "timeout_handling": [
      "test('handle timeout', async ({ request }) => {",
      "  try {",
      "    await request.get('/slow-endpoint', {",
      "      timeout: 5000 // 5 seconds",
      "    });",
      "  } catch (error) {",
      "    expect(error.message).toContain('Request timeout');",
      "  }",
      "});"
    ],
    "retry_logic": [
      "test('retry failed requests', async ({ request }) => {",
      "  let attempts = 0;",
      "  ",
      "  while (attempts < 3) {",
      "    const response = await request.get('/flaky-endpoint');",
      "    ",
      "    if (response.ok()) {",
      "      break;",
      "    }",
      "    ",
      "    attempts++;",
      "    await new Promise(resolve => setTimeout(resolve, 1000));",
      "  }",
      "  ",
      "  expect(attempts).toBeLessThan(3);",
      "});"
    ]
  },
  "data_driven_tests": {
    "description": "Test multiple scenarios with test data",
    "code": [
      "const testData = [",
      "  { endpoint: '/users', expectedStatus: 200 },",
      "  { endpoint: '/users/999', expectedStatus: 404 },",
      "  { endpoint: '/admin', expectedStatus: 403 },",
      "];",
      "",
      "testData.forEach(({ endpoint, expectedStatus }) => {",
      "  test(`GET ${endpoint} returns ${expectedStatus}`, async ({ request }) => {",
      "    const response = await request.get(endpoint);",
      "    expect(response.status()).toBe(expectedStatus);",
      "  });",
      "});"
    ]
  },
  "best_practices": [
    "Use baseURL to avoid repeating API endpoints",
    "Set up authentication once and reuse",
    "Validate response schemas, not just status codes",
    "Test error scenarios and edge cases",
    "Use test data factories for consistent test data",
    "Mock external dependencies in integration tests",
    "Monitor API performance metrics",
    "Test rate limiting and pagination",
    "Verify API versioning behavior"
  ]
}