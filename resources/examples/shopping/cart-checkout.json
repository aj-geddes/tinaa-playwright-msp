{
  "id": "shopping-cart-checkout",
  "name": "Shopping Cart & Checkout Testing",
  "description": "Comprehensive e-commerce testing patterns for cart management and checkout flows",
  "patterns": {
    "cart_management": {
      "description": "Testing shopping cart functionality",
      "file": "tests/ecommerce/cart.spec.ts",
      "code": [
        "import { test, expect } from '@playwright/test';",
        "",
        "test.describe('Shopping Cart', () => {",
        "  test.beforeEach(async ({ page }) => {",
        "    // Clear cart before each test",
        "    await page.goto('/');",
        "    await page.evaluate(() => localStorage.removeItem('cart'));",
        "  });",
        "",
        "  test('add products to cart', async ({ page }) => {",
        "    await page.goto('/products');",
        "    ",
        "    // Add first product",
        "    await page.locator('[data-product-id=\"prod-1\"]').getByRole('button', { name: 'Add to Cart' }).click();",
        "    await expect(page.locator('.cart-count')).toContainText('1');",
        "    await expect(page.locator('.toast-success')).toContainText('Added to cart');",
        "    ",
        "    // Add second product",
        "    await page.locator('[data-product-id=\"prod-2\"]').getByRole('button', { name: 'Add to Cart' }).click();",
        "    await expect(page.locator('.cart-count')).toContainText('2');",
        "    ",
        "    // Navigate to cart",
        "    await page.click('.cart-icon');",
        "    await expect(page).toHaveURL('/cart');",
        "    ",
        "    // Verify cart contents",
        "    await expect(page.locator('.cart-item')).toHaveCount(2);",
        "    await expect(page.locator('.cart-total')).toContainText('$149.98');",
        "  });",
        "",
        "  test('update quantity in cart', async ({ page }) => {",
        "    // Add product via API for faster setup",
        "    await page.evaluate(() => {",
        "      localStorage.setItem('cart', JSON.stringify([",
        "        { id: 'prod-1', name: 'Product 1', price: 49.99, quantity: 1 }",
        "      ]));",
        "    });",
        "    ",
        "    await page.goto('/cart');",
        "    ",
        "    // Increase quantity",
        "    await page.locator('[data-product-id=\"prod-1\"] .quantity-increase').click();",
        "    await expect(page.locator('[data-product-id=\"prod-1\"] .quantity-input')).toHaveValue('2');",
        "    await expect(page.locator('.cart-total')).toContainText('$99.98');",
        "    ",
        "    // Manually enter quantity",
        "    await page.locator('[data-product-id=\"prod-1\"] .quantity-input').fill('5');",
        "    await page.locator('[data-product-id=\"prod-1\"] .quantity-input').blur();",
        "    await expect(page.locator('.cart-total')).toContainText('$249.95');",
        "    ",
        "    // Test max quantity limit",
        "    await page.locator('[data-product-id=\"prod-1\"] .quantity-input').fill('999');",
        "    await page.locator('[data-product-id=\"prod-1\"] .quantity-input').blur();",
        "    await expect(page.locator('.error-message')).toContainText('Maximum quantity is 10');",
        "    await expect(page.locator('[data-product-id=\"prod-1\"] .quantity-input')).toHaveValue('10');",
        "  });",
        "",
        "  test('remove from cart', async ({ page }) => {",
        "    // Setup cart with multiple items",
        "    await page.evaluate(() => {",
        "      localStorage.setItem('cart', JSON.stringify([",
        "        { id: 'prod-1', name: 'Product 1', price: 49.99, quantity: 2 },",
        "        { id: 'prod-2', name: 'Product 2', price: 29.99, quantity: 1 }",
        "      ]));",
        "    });",
        "    ",
        "    await page.goto('/cart');",
        "    await expect(page.locator('.cart-item')).toHaveCount(2);",
        "    ",
        "    // Remove first item",
        "    await page.locator('[data-product-id=\"prod-1\"] .remove-item').click();",
        "    ",
        "    // Confirm removal",
        "    await page.getByRole('button', { name: 'Remove' }).click();",
        "    ",
        "    // Verify item removed",
        "    await expect(page.locator('.cart-item')).toHaveCount(1);",
        "    await expect(page.locator('[data-product-id=\"prod-1\"]')).not.toBeVisible();",
        "    await expect(page.locator('.cart-total')).toContainText('$29.99');",
        "  });",
        "",
        "  test('cart persistence', async ({ page, context }) => {",
        "    await page.goto('/products');",
        "    ",
        "    // Add product",
        "    await page.locator('[data-product-id=\"prod-1\"]').getByRole('button', { name: 'Add to Cart' }).click();",
        "    ",
        "    // Open new tab",
        "    const newPage = await context.newPage();",
        "    await newPage.goto('/cart');",
        "    ",
        "    // Verify cart synced across tabs",
        "    await expect(newPage.locator('.cart-item')).toHaveCount(1);",
        "    ",
        "    // Update in new tab",
        "    await newPage.locator('.quantity-increase').click();",
        "    ",
        "    // Verify update reflected in original tab",
        "    await page.goto('/cart');",
        "    await expect(page.locator('.quantity-input')).toHaveValue('2');",
        "  });",
        "});"
      ]
    },
    "checkout_flow": {
      "description": "Multi-step checkout process testing",
      "code": [
        "test.describe('Checkout Process', () => {",
        "  test.beforeEach(async ({ page }) => {",
        "    // Setup cart with test products",
        "    await page.evaluate(() => {",
        "      localStorage.setItem('cart', JSON.stringify([",
        "        { id: 'prod-1', name: 'Laptop', price: 999.99, quantity: 1 },",
        "        { id: 'prod-2', name: 'Mouse', price: 29.99, quantity: 2 }",
        "      ]));",
        "    });",
        "    await page.goto('/checkout');",
        "  });",
        "",
        "  test('complete checkout as guest', async ({ page }) => {",
        "    // Step 1: Customer Information",
        "    await expect(page.locator('.checkout-step.active')).toContainText('Customer Information');",
        "    ",
        "    await page.fill('#email', 'guest@example.com');",
        "    await page.fill('#firstName', 'John');",
        "    await page.fill('#lastName', 'Doe');",
        "    await page.fill('#phone', '+1234567890');",
        "    ",
        "    await page.click('button#continue-to-shipping');",
        "    ",
        "    // Step 2: Shipping Address",
        "    await expect(page.locator('.checkout-step.active')).toContainText('Shipping');",
        "    ",
        "    await page.fill('#address1', '123 Main St');",
        "    await page.fill('#address2', 'Apt 4B');",
        "    await page.fill('#city', 'New York');",
        "    await page.selectOption('#state', 'NY');",
        "    await page.fill('#zipCode', '10001');",
        "    await page.selectOption('#country', 'US');",
        "    ",
        "    // Select shipping method",
        "    await page.check('input[value=\"standard\"]');",
        "    await expect(page.locator('.shipping-cost')).toContainText('$5.99');",
        "    ",
        "    await page.click('button#continue-to-payment');",
        "    ",
        "    // Step 3: Payment",
        "    await expect(page.locator('.checkout-step.active')).toContainText('Payment');",
        "    ",
        "    // Use Stripe Elements iframe",
        "    const stripeFrame = page.frameLocator('.stripe-frame');",
        "    await stripeFrame.locator('[placeholder=\"Card number\"]').fill('4242424242424242');",
        "    await stripeFrame.locator('[placeholder=\"MM / YY\"]').fill('12/25');",
        "    await stripeFrame.locator('[placeholder=\"CVC\"]').fill('123');",
        "    await stripeFrame.locator('[placeholder=\"ZIP\"]').fill('10001');",
        "    ",
        "    // Apply coupon",
        "    await page.fill('#coupon-code', 'SAVE10');",
        "    await page.click('button#apply-coupon');",
        "    await expect(page.locator('.discount-amount')).toContainText('-$105.99');",
        "    ",
        "    // Review order",
        "    await expect(page.locator('.order-total')).toContainText('$959.88'); // After discount + shipping",
        "    ",
        "    // Complete order",
        "    await page.click('button#place-order');",
        "    ",
        "    // Wait for confirmation",
        "    await page.waitForURL('/order-confirmation/**');",
        "    await expect(page.locator('.order-number')).toBeVisible();",
        "    await expect(page.locator('.confirmation-message')).toContainText('Thank you for your order!');",
        "    ",
        "    // Verify order details",
        "    await expect(page.locator('.order-items .item')).toHaveCount(2);",
        "    await expect(page.locator('.delivery-estimate')).toContainText('Estimated delivery:');",
        "  });",
        "",
        "  test('save address for logged-in user', async ({ page }) => {",
        "    // Login first",
        "    await page.goto('/login');",
        "    await page.fill('#email', 'user@example.com');",
        "    await page.fill('#password', 'password123');",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    await page.goto('/checkout');",
        "    ",
        "    // Should show saved addresses",
        "    await expect(page.locator('.saved-addresses')).toBeVisible();",
        "    await page.click('input[value=\"saved-address-1\"]');",
        "    ",
        "    // Verify address populated",
        "    await expect(page.locator('#address1')).toHaveValue('456 Park Ave');",
        "    ",
        "    // Add new address",
        "    await page.click('button#add-new-address');",
        "    await page.fill('#address1', '789 Broadway');",
        "    await page.check('#save-address');",
        "    await page.fill('#address-nickname', 'Work');",
        "    ",
        "    await page.click('button#continue-to-payment');",
        "    ",
        "    // Verify address saved",
        "    await page.goto('/account/addresses');",
        "    await expect(page.locator('.address-card')).toContainText('Work');",
        "    await expect(page.locator('.address-card')).toContainText('789 Broadway');",
        "  });",
        "});"
      ]
    },
    "payment_methods": {
      "description": "Testing various payment methods",
      "code": [
        "test.describe('Payment Methods', () => {",
        "  test('credit card payment', async ({ page }) => {",
        "    // Test different card types",
        "    const cards = [",
        "      { number: '4242424242424242', type: 'Visa' },",
        "      { number: '5555555555554444', type: 'Mastercard' },",
        "      { number: '378282246310005', type: 'Amex' }",
        "    ];",
        "    ",
        "    for (const card of cards) {",
        "      await page.goto('/checkout/payment');",
        "      ",
        "      const stripeFrame = page.frameLocator('.stripe-frame');",
        "      await stripeFrame.locator('[placeholder=\"Card number\"]').fill(card.number);",
        "      ",
        "      // Verify card type detected",
        "      await expect(page.locator('.card-type')).toContainText(card.type);",
        "    }",
        "  });",
        "",
        "  test('PayPal checkout', async ({ page, context }) => {",
        "    await page.goto('/checkout/payment');",
        "    ",
        "    // Click PayPal button",
        "    const [paypalPopup] = await Promise.all([",
        "      context.waitForEvent('page'),",
        "      page.click('button#paypal-button')",
        "    ]);",
        "    ",
        "    // Handle PayPal login",
        "    await paypalPopup.fill('#email', 'test@paypal.com');",
        "    await paypalPopup.fill('#password', 'testpass123');",
        "    await paypalPopup.click('#btnLogin');",
        "    ",
        "    // Confirm payment",
        "    await paypalPopup.click('#confirmButtonTop');",
        "    ",
        "    // Wait for redirect back",
        "    await page.waitForURL('/checkout/confirm');",
        "    await expect(page.locator('.payment-method')).toContainText('PayPal');",
        "  });",
        "",
        "  test('Apple Pay', async ({ page, browserName }) => {",
        "    test.skip(browserName !== 'webkit', 'Apple Pay only in Safari');",
        "    ",
        "    await page.goto('/checkout/payment');",
        "    ",
        "    // Check Apple Pay availability",
        "    const isAvailable = await page.evaluate(() => ",
        "      window.ApplePaySession?.canMakePayments()",
        "    );",
        "    ",
        "    if (isAvailable) {",
        "      await page.click('button#apple-pay');",
        "      // Apple Pay flow would be handled by the OS",
        "    }",
        "  });",
        "});"
      ]
    },
    "error_handling": {
      "description": "Testing checkout error scenarios",
      "code": [
        "test.describe('Checkout Error Handling', () => {",
        "  test('handle payment failures', async ({ page }) => {",
        "    await page.goto('/checkout/payment');",
        "    ",
        "    // Use card that triggers decline",
        "    const stripeFrame = page.frameLocator('.stripe-frame');",
        "    await stripeFrame.locator('[placeholder=\"Card number\"]').fill('4000000000000002');",
        "    await stripeFrame.locator('[placeholder=\"MM / YY\"]').fill('12/25');",
        "    await stripeFrame.locator('[placeholder=\"CVC\"]').fill('123');",
        "    ",
        "    await page.click('button#place-order');",
        "    ",
        "    // Verify error message",
        "    await expect(page.locator('.payment-error')).toBeVisible();",
        "    await expect(page.locator('.payment-error')).toContainText('Your card was declined');",
        "    ",
        "    // Verify can retry with different card",
        "    await stripeFrame.locator('[placeholder=\"Card number\"]').fill('4242424242424242');",
        "    await page.click('button#place-order');",
        "    await page.waitForURL('/order-confirmation/**');",
        "  });",
        "",
        "  test('handle out of stock during checkout', async ({ page, request }) => {",
        "    // Start checkout",
        "    await page.goto('/checkout');",
        "    ",
        "    // Simulate product going out of stock",
        "    await request.patch('/api/products/prod-1', {",
        "      data: { stock: 0 }",
        "    });",
        "    ",
        "    // Try to complete order",
        "    await page.click('button#place-order');",
        "    ",
        "    // Verify stock error",
        "    await expect(page.locator('.stock-error')).toBeVisible();",
        "    await expect(page.locator('.stock-error')).toContainText('Laptop is out of stock');",
        "    ",
        "    // Verify redirected back to cart",
        "    await page.click('button#return-to-cart');",
        "    await expect(page).toHaveURL('/cart');",
        "    await expect(page.locator('[data-product-id=\"prod-1\"] .out-of-stock')).toBeVisible();",
        "  });",
        "",
        "  test('session timeout during checkout', async ({ page }) => {",
        "    await page.goto('/checkout');",
        "    ",
        "    // Simulate session expiry",
        "    await page.evaluate(() => {",
        "      localStorage.removeItem('auth-token');",
        "      document.cookie = 'session=; expires=Thu, 01 Jan 1970 00:00:00 UTC;';",
        "    });",
        "    ",
        "    // Try to proceed",
        "    await page.click('button#continue-to-shipping');",
        "    ",
        "    // Should show session expired modal",
        "    await expect(page.locator('.session-expired-modal')).toBeVisible();",
        "    await expect(page.locator('.session-expired-modal')).toContainText('Your session has expired');",
        "    ",
        "    // Can continue as guest or login",
        "    await page.click('button#continue-as-guest');",
        "    await expect(page.locator('#email')).toBeVisible();",
        "  });",
        "});"
      ]
    },
    "analytics_tracking": {
      "description": "Testing e-commerce analytics events",
      "code": [
        "test('track checkout analytics', async ({ page }) => {",
        "  // Intercept analytics calls",
        "  const analyticsEvents = [];",
        "  await page.route('**/analytics/**', route => {",
        "    analyticsEvents.push(route.request().postDataJSON());",
        "    route.fulfill({ status: 200 });",
        "  });",
        "  ",
        "  // Add to cart",
        "  await page.goto('/products');",
        "  await page.locator('[data-product-id=\"prod-1\"]').getByRole('button', { name: 'Add to Cart' }).click();",
        "  ",
        "  // Verify add to cart event",
        "  expect(analyticsEvents).toContainEqual(",
        "    expect.objectContaining({",
        "      event: 'add_to_cart',",
        "      value: 999.99,",
        "      currency: 'USD',",
        "      items: [{ item_id: 'prod-1', item_name: 'Laptop', price: 999.99, quantity: 1 }]",
        "    })",
        "  );",
        "  ",
        "  // Begin checkout",
        "  await page.goto('/checkout');",
        "  ",
        "  // Verify begin checkout event",
        "  expect(analyticsEvents).toContainEqual(",
        "    expect.objectContaining({",
        "      event: 'begin_checkout',",
        "      value: 999.99,",
        "      currency: 'USD'",
        "    })",
        "  );",
        "  ",
        "  // Complete purchase",
        "  await page.click('button#place-order');",
        "  await page.waitForURL('/order-confirmation/**');",
        "  ",
        "  // Verify purchase event",
        "  expect(analyticsEvents).toContainEqual(",
        "    expect.objectContaining({",
        "      event: 'purchase',",
        "      transaction_id: expect.any(String),",
        "      value: 999.99,",
        "      currency: 'USD',",
        "      tax: expect.any(Number),",
        "      shipping: expect.any(Number)",
        "    })",
        "  );",
        "});"
      ]
    }
  },
  "performance_testing": {
    "description": "Testing checkout performance",
    "code": [
      "test('checkout page load performance', async ({ page }) => {",
      "  // Start measuring",
      "  await page.goto('/checkout');",
      "  ",
      "  // Get performance metrics",
      "  const metrics = await page.evaluate(() => {",
      "    const navigation = performance.getEntriesByType('navigation')[0];",
      "    return {",
      "      domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,",
      "      loadComplete: navigation.loadEventEnd - navigation.loadEventStart,",
      "      firstPaint: performance.getEntriesByName('first-paint')[0]?.startTime,",
      "      firstContentfulPaint: performance.getEntriesByName('first-contentful-paint')[0]?.startTime",
      "    };",
      "  });",
      "  ",
      "  // Assert performance thresholds",
      "  expect(metrics.domContentLoaded).toBeLessThan(1000); // Under 1 second",
      "  expect(metrics.firstContentfulPaint).toBeLessThan(1500); // Under 1.5 seconds",
      "});",
      "",
      "test('cart updates performance', async ({ page }) => {",
      "  await page.goto('/cart');",
      "  ",
      "  // Measure quantity update time",
      "  const startTime = Date.now();",
      "  ",
      "  await page.locator('.quantity-increase').click();",
      "  await page.waitForSelector('.cart-total:not(.updating)');",
      "  ",
      "  const updateTime = Date.now() - startTime;",
      "  expect(updateTime).toBeLessThan(300); // Under 300ms",
      "});"
    ]
  },
  "best_practices": [
    "Test the complete user journey from product selection to order confirmation",
    "Verify inventory updates in real-time",
    "Test payment method switching and validation",
    "Ensure proper error handling and recovery",
    "Test guest vs authenticated checkout flows",
    "Verify order confirmation emails (using test email service)",
    "Test promotional codes and discounts",
    "Verify tax and shipping calculations",
    "Test abandoned cart recovery",
    "Ensure PCI compliance for payment handling",
    "Test mobile responsiveness of checkout forms",
    "Verify analytics and conversion tracking"
  ]
}