{
  "id": "standard-login",
  "name": "Login Flow Test Patterns",
  "description": "Comprehensive login testing patterns for various authentication scenarios",
  "patterns": {
    "basic_login": {
      "description": "Standard username/password login",
      "file": "tests/auth/login.spec.ts",
      "code": [
        "import { test, expect } from '@playwright/test';",
        "",
        "test.describe('Login functionality', () => {",
        "  test.beforeEach(async ({ page }) => {",
        "    await page.goto('/login');",
        "  });",
        "",
        "  test('successful login', async ({ page }) => {",
        "    // Fill login form",
        "    await page.fill('#username', 'testuser@example.com');",
        "    await page.fill('#password', 'SecurePass123!');",
        "    ",
        "    // Submit form",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    // Verify redirect to dashboard",
        "    await expect(page).toHaveURL('/dashboard');",
        "    await expect(page.locator('.welcome-message')).toContainText('Welcome, Test User');",
        "  });",
        "",
        "  test('invalid credentials', async ({ page }) => {",
        "    await page.fill('#username', 'invalid@example.com');",
        "    await page.fill('#password', 'wrongpassword');",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    // Verify error message",
        "    await expect(page.locator('.error-message')).toBeVisible();",
        "    await expect(page.locator('.error-message')).toContainText('Invalid username or password');",
        "    ",
        "    // Verify still on login page",
        "    await expect(page).toHaveURL('/login');",
        "  });",
        "",
        "  test('empty fields validation', async ({ page }) => {",
        "    // Try to submit empty form",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    // Check validation messages",
        "    await expect(page.locator('#username-error')).toContainText('Email is required');",
        "    await expect(page.locator('#password-error')).toContainText('Password is required');",
        "  });",
        "",
        "  test('remember me functionality', async ({ page, context }) => {",
        "    await page.fill('#username', 'testuser@example.com');",
        "    await page.fill('#password', 'SecurePass123!');",
        "    await page.check('#remember-me');",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    // Verify cookie persistence",
        "    const cookies = await context.cookies();",
        "    const authCookie = cookies.find(c => c.name === 'auth-token');",
        "    expect(authCookie).toBeDefined();",
        "    expect(authCookie.expires).toBeGreaterThan(Date.now() / 1000 + 86400); // At least 1 day",
        "  });",
        "});"
      ]
    },
    "social_login": {
      "description": "OAuth/Social media login flows",
      "code": [
        "test('Google OAuth login', async ({ page, context }) => {",
        "  // Click Google login button",
        "  const [popup] = await Promise.all([",
        "    context.waitForEvent('page'),",
        "    page.click('button#google-login')",
        "  ]);",
        "  ",
        "  // Handle Google OAuth popup",
        "  await popup.fill('input[type=\"email\"]', 'testuser@gmail.com');",
        "  await popup.click('#identifierNext');",
        "  ",
        "  await popup.fill('input[type=\"password\"]', 'password123');",
        "  await popup.click('#passwordNext');",
        "  ",
        "  // Wait for redirect back to app",
        "  await page.waitForURL('/dashboard');",
        "  await expect(page.locator('.user-info')).toContainText('testuser@gmail.com');",
        "});",
        "",
        "test('GitHub OAuth login', async ({ page, browser }) => {",
        "  // Create a new context with GitHub cookies if testing locally",
        "  const context = await browser.newContext({",
        "    storageState: 'playwright/.auth/github.json'",
        "  });",
        "  ",
        "  const page = await context.newPage();",
        "  await page.goto('/login');",
        "  await page.click('button#github-login');",
        "  ",
        "  // Should auto-login with saved session",
        "  await expect(page).toHaveURL('/dashboard');",
        "});"
      ]
    },
    "two_factor_auth": {
      "description": "Two-factor authentication flows",
      "code": [
        "test('2FA with SMS', async ({ page }) => {",
        "  // First step - username/password",
        "  await page.fill('#username', '2fa-user@example.com');",
        "  await page.fill('#password', 'SecurePass123!');",
        "  await page.click('button[type=\"submit\"]');",
        "  ",
        "  // Wait for 2FA page",
        "  await expect(page).toHaveURL('/auth/2fa');",
        "  await expect(page.locator('.sms-sent-message')).toContainText('Code sent to ***-***-1234');",
        "  ",
        "  // In real tests, you might need to:",
        "  // 1. Use a test phone number that returns known codes",
        "  // 2. Mock the SMS service",
        "  // 3. Use a test API to retrieve the code",
        "  const testCode = '123456'; // This would come from your test infrastructure",
        "  ",
        "  await page.fill('#otp-code', testCode);",
        "  await page.click('button#verify-code');",
        "  ",
        "  // Verify successful login",
        "  await expect(page).toHaveURL('/dashboard');",
        "});",
        "",
        "test('2FA with authenticator app', async ({ page }) => {",
        "  // Login with username/password",
        "  await page.fill('#username', 'totp-user@example.com');",
        "  await page.fill('#password', 'SecurePass123!');",
        "  await page.click('button[type=\"submit\"]');",
        "  ",
        "  // Generate TOTP code",
        "  const secret = 'JBSWY3DPEHPK3PXP'; // Test user's TOTP secret",
        "  const totp = generateTOTP(secret); // Helper function using speakeasy or similar",
        "  ",
        "  await page.fill('#totp-code', totp);",
        "  await page.click('button#verify-totp');",
        "  ",
        "  await expect(page).toHaveURL('/dashboard');",
        "});"
      ]
    },
    "password_reset": {
      "description": "Password reset flow",
      "code": [
        "test.describe('Password reset', () => {",
        "  test('request password reset', async ({ page, request }) => {",
        "    await page.goto('/login');",
        "    await page.click('a[href=\"/forgot-password\"]');",
        "    ",
        "    await page.fill('#email', 'user@example.com');",
        "    await page.click('button#send-reset-link');",
        "    ",
        "    // Verify success message",
        "    await expect(page.locator('.success-message')).toContainText('Reset link sent to your email');",
        "    ",
        "    // In test environment, get reset token from API",
        "    const response = await request.get('/api/test/last-reset-token');",
        "    const { token } = await response.json();",
        "    ",
        "    // Visit reset link",
        "    await page.goto(`/reset-password?token=${token}`);",
        "    ",
        "    // Set new password",
        "    await page.fill('#new-password', 'NewSecurePass123!');",
        "    await page.fill('#confirm-password', 'NewSecurePass123!');",
        "    await page.click('button#reset-password');",
        "    ",
        "    // Verify redirect to login",
        "    await expect(page).toHaveURL('/login');",
        "    await expect(page.locator('.success-message')).toContainText('Password reset successful');",
        "    ",
        "    // Verify can login with new password",
        "    await page.fill('#username', 'user@example.com');",
        "    await page.fill('#password', 'NewSecurePass123!');",
        "    await page.click('button[type=\"submit\"]');",
        "    await expect(page).toHaveURL('/dashboard');",
        "  });",
        "});"
      ]
    },
    "session_management": {
      "description": "Session timeout and refresh",
      "code": [
        "test('session timeout warning', async ({ page }) => {",
        "  // Login first",
        "  await loginUser(page);",
        "  ",
        "  // Fast-forward time to near session expiry",
        "  await page.evaluate(() => {",
        "    // Mock timer to simulate 29 minutes passing",
        "    window.__mockTime = Date.now() + 29 * 60 * 1000;",
        "  });",
        "  ",
        "  // Trigger activity check",
        "  await page.click('body');",
        "  ",
        "  // Verify warning modal",
        "  await expect(page.locator('.session-warning-modal')).toBeVisible();",
        "  await expect(page.locator('.session-warning-modal')).toContainText('Your session will expire in 1 minute');",
        "  ",
        "  // Click continue session",
        "  await page.click('button#continue-session');",
        "  ",
        "  // Verify session extended",
        "  await expect(page.locator('.session-warning-modal')).not.toBeVisible();",
        "});",
        "",
        "test('auto logout on session expiry', async ({ page }) => {",
        "  await loginUser(page);",
        "  ",
        "  // Simulate session expiry",
        "  await page.evaluate(() => {",
        "    localStorage.removeItem('auth-token');",
        "    sessionStorage.clear();",
        "  });",
        "  ",
        "  // Try to navigate",
        "  await page.click('a[href=\"/profile\"]');",
        "  ",
        "  // Should redirect to login",
        "  await expect(page).toHaveURL('/login?session=expired');",
        "  await expect(page.locator('.info-message')).toContainText('Your session has expired');",
        "});"
      ]
    }
  },
  "helpers": {
    "login_helper": {
      "description": "Reusable login helper function",
      "code": [
        "export async function loginUser(page, username = 'testuser@example.com', password = 'SecurePass123!') {",
        "  await page.goto('/login');",
        "  await page.fill('#username', username);",
        "  await page.fill('#password', password);",
        "  await page.click('button[type=\"submit\"]');",
        "  await page.waitForURL('/dashboard');",
        "}",
        "",
        "export async function loginViaAPI(request, username, password) {",
        "  const response = await request.post('/api/auth/login', {",
        "    data: { username, password }",
        "  });",
        "  ",
        "  const { token } = await response.json();",
        "  return token;",
        "}",
        "",
        "export async function setupAuthenticatedContext(browser, token) {",
        "  const context = await browser.newContext({",
        "    extraHTTPHeaders: {",
        "      'Authorization': `Bearer ${token}`",
        "    }",
        "  });",
        "  ",
        "  await context.addCookies([{",
        "    name: 'auth-token',",
        "    value: token,",
        "    domain: 'localhost',",
        "    path: '/'",
        "  }]);",
        "  ",
        "  return context;",
        "}"
      ]
    }
  },
  "security_tests": {
    "description": "Security-focused login tests",
    "code": [
      "test('prevents brute force attacks', async ({ page }) => {",
      "  // Attempt multiple failed logins",
      "  for (let i = 0; i < 5; i++) {",
      "    await page.fill('#username', 'testuser@example.com');",
      "    await page.fill('#password', `wrong${i}`);",
      "    await page.click('button[type=\"submit\"]');",
      "    await page.waitForSelector('.error-message');",
      "  }",
      "  ",
      "  // Verify account locked",
      "  await expect(page.locator('.error-message')).toContainText('Account temporarily locked');",
      "  ",
      "  // Verify legitimate password also fails",
      "  await page.fill('#password', 'SecurePass123!');",
      "  await page.click('button[type=\"submit\"]');",
      "  await expect(page.locator('.error-message')).toContainText('Account temporarily locked');",
      "});",
      "",
      "test('XSS prevention in login form', async ({ page }) => {",
      "  const xssPayload = '<script>alert(\"XSS\")</script>';",
      "  ",
      "  await page.fill('#username', xssPayload);",
      "  await page.fill('#password', 'password');",
      "  await page.click('button[type=\"submit\"]');",
      "  ",
      "  // Verify no script execution",
      "  const alertFired = await page.evaluate(() => {",
      "    return window.__xssAlertFired || false;",
      "  });",
      "  ",
      "  expect(alertFired).toBe(false);",
      "  ",
      "  // Verify error message is properly escaped",
      "  const errorText = await page.locator('.error-message').textContent();",
      "  expect(errorText).not.toContain('<script>');",
      "});"
    ]
  },
  "best_practices": [
    "Never hardcode credentials in tests",
    "Use environment variables for test accounts",
    "Test both positive and negative scenarios",
    "Verify security headers after login",
    "Test session management thoroughly",
    "Include accessibility checks for login forms",
    "Test password managers compatibility",
    "Verify HTTPS redirect for login pages",
    "Test CAPTCHA integration if applicable"
  ]
}