{
  "id": "analytics-dashboard",
  "name": "Dashboard & Analytics Testing",
  "description": "Testing patterns for complex dashboards with charts, filters, and real-time data",
  "patterns": {
    "dashboard_layout": {
      "description": "Testing dashboard components and layout",
      "file": "tests/dashboard/layout.spec.ts",
      "code": [
        "import { test, expect } from '@playwright/test';",
        "",
        "test.describe('Dashboard Layout', () => {",
        "  test.beforeEach(async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    await page.waitForLoadState('networkidle');",
        "  });",
        "",
        "  test('responsive grid layout', async ({ page }) => {",
        "    // Desktop view - 3 columns",
        "    await page.setViewportSize({ width: 1440, height: 900 });",
        "    await expect(page.locator('.dashboard-grid')).toHaveCSS('grid-template-columns', /repeat\\(3/);",
        "    ",
        "    // Tablet view - 2 columns",
        "    await page.setViewportSize({ width: 768, height: 1024 });",
        "    await expect(page.locator('.dashboard-grid')).toHaveCSS('grid-template-columns', /repeat\\(2/);",
        "    ",
        "    // Mobile view - 1 column",
        "    await page.setViewportSize({ width: 375, height: 667 });",
        "    await expect(page.locator('.dashboard-grid')).toHaveCSS('grid-template-columns', /1fr/);",
        "  });",
        "",
        "  test('widget visibility and order', async ({ page }) => {",
        "    // Verify default widgets",
        "    const expectedWidgets = [",
        "      'Revenue Overview',",
        "      'User Activity',",
        "      'Sales by Region',",
        "      'Top Products',",
        "      'Recent Orders',",
        "      'Performance Metrics'",
        "    ];",
        "    ",
        "    for (const widget of expectedWidgets) {",
        "      await expect(page.locator(`.widget-title:has-text(\"${widget}\")`)).toBeVisible();",
        "    }",
        "    ",
        "    // Test widget collapse/expand",
        "    await page.click('.widget:has-text(\"Revenue Overview\") .collapse-button');",
        "    await expect(page.locator('.widget:has-text(\"Revenue Overview\") .widget-content')).not.toBeVisible();",
        "    ",
        "    await page.click('.widget:has-text(\"Revenue Overview\") .expand-button');",
        "    await expect(page.locator('.widget:has-text(\"Revenue Overview\") .widget-content')).toBeVisible();",
        "  });",
        "",
        "  test('drag and drop widget rearrangement', async ({ page }) => {",
        "    // Get initial positions",
        "    const revenueWidget = page.locator('.widget:has-text(\"Revenue Overview\")');",
        "    const activityWidget = page.locator('.widget:has-text(\"User Activity\")');",
        "    ",
        "    const revenueBefore = await revenueWidget.boundingBox();",
        "    const activityBefore = await activityWidget.boundingBox();",
        "    ",
        "    // Drag revenue widget to activity widget position",
        "    await revenueWidget.dragTo(activityWidget);",
        "    ",
        "    // Verify positions swapped",
        "    const revenueAfter = await revenueWidget.boundingBox();",
        "    expect(revenueAfter.y).toBeGreaterThan(revenueBefore.y);",
        "    ",
        "    // Verify layout saved",
        "    await page.reload();",
        "    const revenueReloaded = await revenueWidget.boundingBox();",
        "    expect(revenueReloaded.y).toBeCloseTo(revenueAfter.y, 0);",
        "  });",
        "});"
      ]
    },
    "charts_visualization": {
      "description": "Testing interactive charts and graphs",
      "code": [
        "test.describe('Chart Interactions', () => {",
        "  test('line chart hover tooltips', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Wait for chart to render",
        "    await page.waitForSelector('.revenue-chart canvas');",
        "    ",
        "    // Hover over data point",
        "    const chart = page.locator('.revenue-chart');",
        "    await chart.hover({ position: { x: 200, y: 150 } });",
        "    ",
        "    // Verify tooltip appears",
        "    await expect(page.locator('.chart-tooltip')).toBeVisible();",
        "    await expect(page.locator('.chart-tooltip')).toContainText('Revenue: $');",
        "    await expect(page.locator('.chart-tooltip')).toContainText('Date:');",
        "  });",
        "",
        "  test('pie chart segment click', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Click on pie segment",
        "    await page.locator('.sales-by-region-chart').click({ position: { x: 150, y: 100 } });",
        "    ",
        "    // Verify drill-down modal",
        "    await expect(page.locator('.drill-down-modal')).toBeVisible();",
        "    await expect(page.locator('.drill-down-modal h2')).toContainText('North America Sales');",
        "    await expect(page.locator('.drill-down-table')).toBeVisible();",
        "  });",
        "",
        "  test('bar chart data updates', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Get initial bar count",
        "    const initialBars = await page.locator('.top-products-chart .bar').count();",
        "    ",
        "    // Change data range",
        "    await page.selectOption('#products-limit', '20');",
        "    ",
        "    // Wait for chart update",
        "    await page.waitForTimeout(500);",
        "    ",
        "    // Verify more bars displayed",
        "    const updatedBars = await page.locator('.top-products-chart .bar').count();",
        "    expect(updatedBars).toBe(20);",
        "    expect(updatedBars).toBeGreaterThan(initialBars);",
        "  });",
        "",
        "  test('chart export functionality', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Test PNG export",
        "    const [download] = await Promise.all([",
        "      page.waitForEvent('download'),",
        "      page.click('.revenue-chart .export-button'),",
        "      page.click('[data-export-type=\"png\"]')",
        "    ]);",
        "    ",
        "    expect(download.suggestedFilename()).toContain('revenue-chart');",
        "    expect(download.suggestedFilename()).toContain('.png');",
        "    ",
        "    // Test CSV data export",
        "    const [csvDownload] = await Promise.all([",
        "      page.waitForEvent('download'),",
        "      page.click('.revenue-chart .export-button'),",
        "      page.click('[data-export-type=\"csv\"]')",
        "    ]);",
        "    ",
        "    expect(csvDownload.suggestedFilename()).toContain('.csv');",
        "  });",
        "});"
      ]
    },
    "filters_date_range": {
      "description": "Testing dashboard filters and date ranges",
      "code": [
        "test.describe('Dashboard Filters', () => {",
        "  test('date range picker', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Open date picker",
        "    await page.click('.date-range-picker');",
        "    ",
        "    // Select preset range",
        "    await page.click('[data-range=\"last-30-days\"]');",
        "    ",
        "    // Verify date range updated",
        "    await expect(page.locator('.date-range-display')).toContainText('Last 30 days');",
        "    ",
        "    // Verify data refreshed",
        "    await expect(page.locator('.loading-overlay')).toBeVisible();",
        "    await expect(page.locator('.loading-overlay')).not.toBeVisible({ timeout: 5000 });",
        "    ",
        "    // Custom date range",
        "    await page.click('.date-range-picker');",
        "    await page.click('[data-range=\"custom\"]');",
        "    ",
        "    // Select start date",
        "    await page.click('.calendar-start [data-date=\"2024-01-01\"]');",
        "    ",
        "    // Select end date",
        "    await page.click('.calendar-end [data-date=\"2024-01-31\"]');",
        "    ",
        "    await page.click('button:has-text(\"Apply\")');",
        "    ",
        "    // Verify custom range applied",
        "    await expect(page.locator('.date-range-display')).toContainText('Jan 1 - Jan 31, 2024');",
        "  });",
        "",
        "  test('multiple filter combination', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Apply region filter",
        "    await page.selectOption('#region-filter', 'north-america');",
        "    ",
        "    // Apply product category filter",
        "    await page.click('.category-filter-dropdown');",
        "    await page.check('input[value=\"electronics\"]');",
        "    await page.check('input[value=\"software\"]');",
        "    await page.click('body'); // Close dropdown",
        "    ",
        "    // Apply status filter",
        "    await page.click('.status-toggle[data-status=\"active\"]');",
        "    ",
        "    // Verify filters applied",
        "    await expect(page.locator('.active-filters')).toContainText('Region: North America');",
        "    await expect(page.locator('.active-filters')).toContainText('Categories: Electronics, Software');",
        "    await expect(page.locator('.active-filters')).toContainText('Status: Active');",
        "    ",
        "    // Verify data filtered",
        "    await page.waitForSelector('.data-updated-indicator');",
        "    ",
        "    // Clear individual filter",
        "    await page.click('.active-filters .remove-filter[data-filter=\"region\"]');",
        "    await expect(page.locator('.active-filters')).not.toContainText('Region:');",
        "    ",
        "    // Clear all filters",
        "    await page.click('button:has-text(\"Clear All Filters\")');",
        "    await expect(page.locator('.active-filters')).not.toBeVisible();",
        "  });",
        "",
        "  test('filter persistence', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Set filters",
        "    await page.selectOption('#region-filter', 'europe');",
        "    await page.click('.date-range-picker');",
        "    await page.click('[data-range=\"last-7-days\"]');",
        "    ",
        "    // Navigate away and back",
        "    await page.goto('/settings');",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Verify filters retained",
        "    await expect(page.locator('#region-filter')).toHaveValue('europe');",
        "    await expect(page.locator('.date-range-display')).toContainText('Last 7 days');",
        "  });",
        "});"
      ]
    },
    "real_time_updates": {
      "description": "Testing real-time data updates",
      "code": [
        "test.describe('Real-time Dashboard Updates', () => {",
        "  test('websocket data streaming', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Wait for WebSocket connection",
        "    await page.waitForFunction(() => {",
        "      return window.wsConnected === true;",
        "    });",
        "    ",
        "    // Verify real-time indicator",
        "    await expect(page.locator('.real-time-indicator')).toHaveClass(/connected/);",
        "    await expect(page.locator('.real-time-indicator')).toContainText('Live');",
        "    ",
        "    // Capture initial metric value",
        "    const initialValue = await page.locator('.active-users-count').textContent();",
        "    ",
        "    // Wait for update (simulate or wait for real update)",
        "    await page.waitForFunction(",
        "      (initial) => {",
        "        const current = document.querySelector('.active-users-count').textContent;",
        "        return current !== initial;",
        "      },",
        "      initialValue,",
        "      { timeout: 30000 }",
        "    );",
        "    ",
        "    // Verify update animation",
        "    await expect(page.locator('.active-users-count')).toHaveClass(/updating/);",
        "  });",
        "",
        "  test('auto-refresh toggle', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Disable auto-refresh",
        "    await page.click('.auto-refresh-toggle');",
        "    await expect(page.locator('.auto-refresh-toggle')).not.toBeChecked();",
        "    ",
        "    // Verify no updates occur",
        "    const timestamp = await page.locator('.last-updated').textContent();",
        "    await page.waitForTimeout(6000); // Default refresh is 5 seconds",
        "    const timestampAfter = await page.locator('.last-updated').textContent();",
        "    expect(timestamp).toBe(timestampAfter);",
        "    ",
        "    // Re-enable and verify updates resume",
        "    await page.click('.auto-refresh-toggle');",
        "    await page.waitForFunction(",
        "      (initial) => {",
        "        const current = document.querySelector('.last-updated').textContent;",
        "        return current !== initial;",
        "      },",
        "      timestampAfter",
        "    );",
        "  });",
        "",
        "  test('notification alerts', async ({ page }) => {",
        "    await page.goto('/dashboard');",
        "    ",
        "    // Simulate alert condition via API",
        "    await page.evaluate(() => {",
        "      window.postMessage({",
        "        type: 'alert',",
        "        severity: 'warning',",
        "        message: 'High traffic detected'",
        "      }, '*');",
        "    });",
        "    ",
        "    // Verify alert appears",
        "    await expect(page.locator('.alert-notification')).toBeVisible();",
        "    await expect(page.locator('.alert-notification')).toContainText('High traffic detected');",
        "    await expect(page.locator('.alert-notification')).toHaveClass(/warning/);",
        "    ",
        "    // Dismiss alert",
        "    await page.click('.alert-notification .dismiss');",
        "    await expect(page.locator('.alert-notification')).not.toBeVisible();",
        "  });",
        "});"
      ]
    },
    "data_export": {
      "description": "Testing dashboard data export features",
      "code": [
        "test('export dashboard report', async ({ page }) => {",
        "  await page.goto('/dashboard');",
        "  ",
        "  // Configure export settings",
        "  await page.click('button:has-text(\"Export Dashboard\")');",
        "  ",
        "  // Select format",
        "  await page.check('input[value=\"pdf\"]');",
        "  ",
        "  // Select widgets to include",
        "  await page.check('input[name=\"include-revenue\"]');",
        "  await page.check('input[name=\"include-activity\"]');",
        "  await page.uncheck('input[name=\"include-orders\"]');",
        "  ",
        "  // Set export options",
        "  await page.check('input[name=\"include-filters\"]');",
        "  await page.fill('#report-title', 'Monthly Dashboard Report');",
        "  ",
        "  // Generate report",
        "  const [download] = await Promise.all([",
        "    page.waitForEvent('download'),",
        "    page.click('button:has-text(\"Generate Report\")')",
        "  ]);",
        "  ",
        "  // Verify download",
        "  expect(download.suggestedFilename()).toContain('dashboard-report');",
        "  expect(download.suggestedFilename()).toContain('.pdf');",
        "});",
        "",
        "test('schedule automated reports', async ({ page }) => {",
        "  await page.goto('/dashboard/settings');",
        "  ",
        "  // Enable scheduled reports",
        "  await page.check('#enable-scheduled-reports');",
        "  ",
        "  // Configure schedule",
        "  await page.selectOption('#report-frequency', 'weekly');",
        "  await page.selectOption('#report-day', 'monday');",
        "  await page.fill('#report-time', '09:00');",
        "  ",
        "  // Add recipients",
        "  await page.fill('#recipient-email', 'team@example.com');",
        "  await page.click('button:has-text(\"Add Recipient\")');",
        "  ",
        "  // Save settings",
        "  await page.click('button:has-text(\"Save Schedule\")');",
        "  ",
        "  // Verify confirmation",
        "  await expect(page.locator('.toast-success')).toContainText('Report schedule saved');",
        "  await expect(page.locator('.next-report-time')).toContainText('Next report:');",
        "});"
      ]
    },
    "performance_monitoring": {
      "description": "Testing dashboard performance metrics",
      "code": [
        "test('dashboard load performance', async ({ page }) => {",
        "  // Start performance measurement",
        "  await page.goto('/dashboard', { waitUntil: 'networkidle' });",
        "  ",
        "  // Measure key metrics",
        "  const metrics = await page.evaluate(() => {",
        "    const navigation = performance.getEntriesByType('navigation')[0];",
        "    const paintEntries = performance.getEntriesByType('paint');",
        "    ",
        "    return {",
        "      // Time to first byte",
        "      ttfb: navigation.responseStart - navigation.requestStart,",
        "      // First contentful paint",
        "      fcp: paintEntries.find(e => e.name === 'first-contentful-paint')?.startTime,",
        "      // Largest contentful paint",
        "      lcp: performance.getEntriesByType('largest-contentful-paint')[0]?.startTime,",
        "      // Time to interactive",
        "      tti: performance.timing.domInteractive - performance.timing.navigationStart,",
        "      // Total blocking time",
        "      tbt: performance.getEntriesByType('measure')",
        "        .filter(e => e.name.includes('blocking'))",
        "        .reduce((sum, e) => sum + e.duration, 0)",
        "    };",
        "  });",
        "  ",
        "  // Assert performance thresholds",
        "  expect(metrics.ttfb).toBeLessThan(600); // TTFB under 600ms",
        "  expect(metrics.fcp).toBeLessThan(1800); // FCP under 1.8s",
        "  expect(metrics.lcp).toBeLessThan(2500); // LCP under 2.5s",
        "  expect(metrics.tti).toBeLessThan(3800); // TTI under 3.8s",
        "});",
        "",
        "test('widget lazy loading', async ({ page }) => {",
        "  await page.goto('/dashboard');",
        "  ",
        "  // Verify above-fold widgets loaded",
        "  await expect(page.locator('.widget').first()).toBeVisible();",
        "  ",
        "  // Verify below-fold widgets not loaded",
        "  const lazyWidget = page.locator('.widget[data-lazy=\"true\"]').last();",
        "  const isLoaded = await lazyWidget.evaluate(el => {",
        "    return el.querySelector('.widget-content')?.children.length > 0;",
        "  });",
        "  expect(isLoaded).toBeFalsy();",
        "  ",
        "  // Scroll to trigger lazy load",
        "  await lazyWidget.scrollIntoViewIfNeeded();",
        "  ",
        "  // Verify widget loads",
        "  await expect(lazyWidget.locator('.widget-content')).not.toBeEmpty();",
        "});"
      ]
    }
  },
  "accessibility": {
    "description": "Dashboard accessibility testing",
    "code": [
      "test('keyboard navigation', async ({ page }) => {",
        "  await page.goto('/dashboard');",
        "  ",
        "  // Tab through widgets",
        "  await page.keyboard.press('Tab');",
        "  await expect(page.locator(':focus')).toHaveAttribute('aria-label', 'Revenue Overview widget');",
        "  ",
        "  // Enter widget for detailed navigation",
        "  await page.keyboard.press('Enter');",
        "  await expect(page.locator('.widget:has-text(\"Revenue Overview\")')).toHaveAttribute('aria-expanded', 'true');",
        "  ",
        "  // Navigate chart with arrow keys",
        "  await page.keyboard.press('ArrowRight');",
        "  await expect(page.locator('.chart-point:focus')).toBeVisible();",
        "  ",
        "  // Escape to exit widget focus",
        "  await page.keyboard.press('Escape');",
        "  await expect(page.locator('.widget:has-text(\"Revenue Overview\")')).toHaveAttribute('aria-expanded', 'false');",
        "});",
        "",
        "test('screen reader announcements', async ({ page }) => {",
        "  await page.goto('/dashboard');",
        "  ",
        "  // Verify live regions",
        "  await expect(page.locator('[aria-live=\"polite\"]')).toBeAttached();",
        "  await expect(page.locator('[aria-live=\"assertive\"]')).toBeAttached();",
        "  ",
        "  // Trigger data update",
        "  await page.click('button:has-text(\"Refresh\")');",
        "  ",
        "  // Verify announcement",
        "  await expect(page.locator('[aria-live=\"polite\"]')).toContainText('Dashboard data updated');",
        "});"
      ]
    }
  },
  "best_practices": [
    "Test with realistic data volumes",
    "Verify chart rendering with edge cases (no data, single point)",
    "Test filter combinations thoroughly",
    "Ensure responsive design works across devices",
    "Test export functionality with large datasets",
    "Verify real-time updates don't cause memory leaks",
    "Test dashboard customization persistence",
    "Include accessibility testing for data visualizations",
    "Test performance with multiple widgets",
    "Verify error states for failed data loads",
    "Test print layouts for dashboards",
    "Ensure color contrast for data visualizations"
  ]
}