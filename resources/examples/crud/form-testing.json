{
  "id": "crud-form-testing",
  "name": "CRUD Form Testing Patterns",
  "description": "Comprehensive testing patterns for Create, Read, Update, Delete operations",
  "patterns": {
    "create_form": {
      "description": "Testing form creation with validation",
      "file": "tests/crud/create-user.spec.ts",
      "code": [
        "import { test, expect } from '@playwright/test';",
        "import { faker } from '@faker-js/faker';",
        "",
        "test.describe('Create User Form', () => {",
        "  test.beforeEach(async ({ page }) => {",
        "    await page.goto('/admin/users/new');",
        "  });",
        "",
        "  test('create new user successfully', async ({ page }) => {",
        "    const userData = {",
        "      firstName: faker.person.firstName(),",
        "      lastName: faker.person.lastName(),",
        "      email: faker.internet.email(),",
        "      phone: faker.phone.number(),",
        "      role: 'editor'",
        "    };",
        "    ",
        "    // Fill form fields",
        "    await page.fill('#firstName', userData.firstName);",
        "    await page.fill('#lastName', userData.lastName);",
        "    await page.fill('#email', userData.email);",
        "    await page.fill('#phone', userData.phone);",
        "    await page.selectOption('#role', userData.role);",
        "    ",
        "    // Upload avatar",
        "    await page.setInputFiles('#avatar', 'test-assets/avatar.jpg');",
        "    ",
        "    // Submit form",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    // Verify success",
        "    await expect(page.locator('.toast-success')).toContainText('User created successfully');",
        "    await expect(page).toHaveURL(/\\/admin\\/users\\/\\d+/);",
        "    ",
        "    // Verify data is displayed correctly",
        "    await expect(page.locator('.user-name')).toContainText(`${userData.firstName} ${userData.lastName}`);",
        "    await expect(page.locator('.user-email')).toContainText(userData.email);",
        "  });",
        "",
        "  test('field validation', async ({ page }) => {",
        "    // Test required fields",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    await expect(page.locator('#firstName-error')).toContainText('First name is required');",
        "    await expect(page.locator('#lastName-error')).toContainText('Last name is required');",
        "    await expect(page.locator('#email-error')).toContainText('Email is required');",
        "    ",
        "    // Test email format",
        "    await page.fill('#email', 'invalid-email');",
        "    await page.click('button[type=\"submit\"]');",
        "    await expect(page.locator('#email-error')).toContainText('Please enter a valid email');",
        "    ",
        "    // Test phone format",
        "    await page.fill('#phone', '123');",
        "    await page.click('button[type=\"submit\"]');",
        "    await expect(page.locator('#phone-error')).toContainText('Please enter a valid phone number');",
        "  });",
        "",
        "  test('duplicate email validation', async ({ page, request }) => {",
        "    // Create existing user via API",
        "    const existingEmail = 'existing@example.com';",
        "    await request.post('/api/users', {",
        "      data: {",
        "        firstName: 'Existing',",
        "        lastName: 'User',",
        "        email: existingEmail",
        "      }",
        "    });",
        "    ",
        "    // Try to create user with same email",
        "    await page.fill('#firstName', 'New');",
        "    await page.fill('#lastName', 'User');",
        "    await page.fill('#email', existingEmail);",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    // Verify error",
        "    await expect(page.locator('#email-error')).toContainText('Email already exists');",
        "  });",
        "});"
      ]
    },
    "read_list": {
      "description": "Testing data tables and list views",
      "code": [
        "test.describe('User List View', () => {",
        "  test('display users with pagination', async ({ page }) => {",
        "    await page.goto('/admin/users');",
        "    ",
        "    // Verify table headers",
        "    const headers = ['Name', 'Email', 'Role', 'Status', 'Created', 'Actions'];",
        "    for (const header of headers) {",
        "      await expect(page.locator(`th:has-text(\"${header}\")`)).toBeVisible();",
        "    }",
        "    ",
        "    // Verify data is loaded",
        "    await expect(page.locator('tbody tr')).toHaveCount(10); // Default page size",
        "    ",
        "    // Test pagination",
        "    await expect(page.locator('.pagination-info')).toContainText('Showing 1-10 of 45');",
        "    ",
        "    // Go to next page",
        "    await page.click('button[aria-label=\"Next page\"]');",
        "    await expect(page.locator('.pagination-info')).toContainText('Showing 11-20 of 45');",
        "  });",
        "",
        "  test('search functionality', async ({ page }) => {",
        "    await page.goto('/admin/users');",
        "    ",
        "    // Search by name",
        "    await page.fill('#search', 'John');",
        "    await page.waitForTimeout(500); // Debounce delay",
        "    ",
        "    // Verify filtered results",
        "    const rows = await page.locator('tbody tr').count();",
        "    expect(rows).toBeGreaterThan(0);",
        "    ",
        "    // Verify all results contain search term",
        "    const names = await page.locator('td.user-name').allTextContents();",
        "    names.forEach(name => {",
        "      expect(name.toLowerCase()).toContain('john');",
        "    });",
        "  });",
        "",
        "  test('sort functionality', async ({ page }) => {",
        "    await page.goto('/admin/users');",
        "    ",
        "    // Sort by email ascending",
        "    await page.click('th:has-text(\"Email\")');",
        "    await page.waitForSelector('.sort-asc');",
        "    ",
        "    // Get emails and verify order",
        "    const emails = await page.locator('td.user-email').allTextContents();",
        "    const sortedEmails = [...emails].sort();",
        "    expect(emails).toEqual(sortedEmails);",
        "    ",
        "    // Sort descending",
        "    await page.click('th:has-text(\"Email\")');",
        "    await page.waitForSelector('.sort-desc');",
        "    ",
        "    const emailsDesc = await page.locator('td.user-email').allTextContents();",
        "    const sortedEmailsDesc = [...emailsDesc].sort().reverse();",
        "    expect(emailsDesc).toEqual(sortedEmailsDesc);",
        "  });",
        "",
        "  test('bulk actions', async ({ page }) => {",
        "    await page.goto('/admin/users');",
        "    ",
        "    // Select multiple users",
        "    await page.check('input[data-row=\"1\"]');",
        "    await page.check('input[data-row=\"2\"]');",
        "    await page.check('input[data-row=\"3\"]');",
        "    ",
        "    // Verify bulk actions appear",
        "    await expect(page.locator('.bulk-actions')).toBeVisible();",
        "    await expect(page.locator('.selected-count')).toContainText('3 users selected');",
        "    ",
        "    // Perform bulk delete",
        "    await page.click('button#bulk-delete');",
        "    await page.click('button#confirm-delete');",
        "    ",
        "    // Verify success",
        "    await expect(page.locator('.toast-success')).toContainText('3 users deleted');",
        "  });",
        "});"
      ]
    },
    "update_form": {
      "description": "Testing edit/update functionality",
      "code": [
        "test.describe('Update User Form', () => {",
        "  let userId: string;",
        "  ",
        "  test.beforeEach(async ({ page, request }) => {",
        "    // Create test user",
        "    const response = await request.post('/api/users', {",
        "      data: {",
        "        firstName: 'Original',",
        "        lastName: 'User',",
        "        email: 'original@example.com',",
        "        role: 'viewer'",
        "      }",
        "    });",
        "    const user = await response.json();",
        "    userId = user.id;",
        "    ",
        "    await page.goto(`/admin/users/${userId}/edit`);",
        "  });",
        "",
        "  test('update user details', async ({ page }) => {",
        "    // Verify current values are loaded",
        "    await expect(page.locator('#firstName')).toHaveValue('Original');",
        "    await expect(page.locator('#lastName')).toHaveValue('User');",
        "    await expect(page.locator('#email')).toHaveValue('original@example.com');",
        "    await expect(page.locator('#role')).toHaveValue('viewer');",
        "    ",
        "    // Update fields",
        "    await page.fill('#firstName', 'Updated');",
        "    await page.fill('#lastName', 'Name');",
        "    await page.selectOption('#role', 'editor');",
        "    ",
        "    // Save changes",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    // Verify success",
        "    await expect(page.locator('.toast-success')).toContainText('User updated successfully');",
        "    await expect(page).toHaveURL(`/admin/users/${userId}`);",
        "    ",
        "    // Verify updated data",
        "    await expect(page.locator('.user-name')).toContainText('Updated Name');",
        "    await expect(page.locator('.user-role')).toContainText('Editor');",
        "  });",
        "",
        "  test('optimistic updates with error handling', async ({ page }) => {",
        "    // Intercept API to simulate failure",
        "    await page.route(`**/api/users/${userId}`, route => {",
        "      route.abort('failed');",
        "    });",
        "    ",
        "    // Make changes",
        "    await page.fill('#firstName', 'Failed');",
        "    await page.click('button[type=\"submit\"]');",
        "    ",
        "    // Verify error handling",
        "    await expect(page.locator('.toast-error')).toContainText('Failed to update user');",
        "    ",
        "    // Verify form is still editable",
        "    await expect(page.locator('#firstName')).toBeEnabled();",
        "    ",
        "    // Verify original values can be restored",
        "    await page.click('button#reset-form');",
        "    await expect(page.locator('#firstName')).toHaveValue('Original');",
        "  });",
        "",
        "  test('concurrent edit detection', async ({ page, browser }) => {",
        "    // Open same user in another tab",
        "    const context2 = await browser.newContext();",
        "    const page2 = await context2.newPage();",
        "    await page2.goto(`/admin/users/${userId}/edit`);",
        "    ",
        "    // Edit in first tab",
        "    await page.fill('#firstName', 'Tab1');",
        "    await page.click('button[type=\"submit\"]');",
        "    await expect(page.locator('.toast-success')).toBeVisible();",
        "    ",
        "    // Try to edit in second tab",
        "    await page2.fill('#firstName', 'Tab2');",
        "    await page2.click('button[type=\"submit\"]');",
        "    ",
        "    // Should show conflict warning",
        "    await expect(page2.locator('.modal-conflict')).toBeVisible();",
        "    await expect(page2.locator('.modal-conflict')).toContainText('This record has been modified');",
        "    ",
        "    await context2.close();",
        "  });",
        "});"
      ]
    },
    "delete_operations": {
      "description": "Testing delete functionality with confirmations",
      "code": [
        "test.describe('Delete Operations', () => {",
        "  test('delete with confirmation', async ({ page, request }) => {",
        "    // Create test user",
        "    const response = await request.post('/api/users', {",
        "      data: { firstName: 'Delete', lastName: 'Me', email: 'delete@example.com' }",
        "    });",
        "    const user = await response.json();",
        "    ",
        "    await page.goto(`/admin/users/${user.id}`);",
        "    ",
        "    // Click delete button",
        "    await page.click('button#delete-user');",
        "    ",
        "    // Verify confirmation dialog",
        "    await expect(page.locator('.modal-delete')).toBeVisible();",
        "    await expect(page.locator('.modal-delete')).toContainText('Are you sure you want to delete');",
        "    await expect(page.locator('.modal-delete')).toContainText('Delete Me');",
        "    ",
        "    // Cancel deletion",
        "    await page.click('button#cancel-delete');",
        "    await expect(page.locator('.modal-delete')).not.toBeVisible();",
        "    ",
        "    // Delete again and confirm",
        "    await page.click('button#delete-user');",
        "    await page.click('button#confirm-delete');",
        "    ",
        "    // Verify deletion",
        "    await expect(page.locator('.toast-success')).toContainText('User deleted successfully');",
        "    await expect(page).toHaveURL('/admin/users');",
        "    ",
        "    // Verify user is not in list",
        "    await expect(page.locator(`tr[data-user-id=\"${user.id}\"]`)).not.toBeVisible();",
        "  });",
        "",
        "  test('soft delete with restore option', async ({ page, request }) => {",
        "    // Create and soft delete user",
        "    const response = await request.post('/api/users', {",
        "      data: { firstName: 'Soft', lastName: 'Delete', email: 'soft@example.com' }",
        "    });",
        "    const user = await response.json();",
        "    ",
        "    await page.goto(`/admin/users/${user.id}`);",
        "    await page.click('button#delete-user');",
        "    await page.click('button#confirm-delete');",
        "    ",
        "    // Go to deleted users",
        "    await page.goto('/admin/users?status=deleted');",
        "    ",
        "    // Verify user appears in deleted list",
        "    await expect(page.locator(`tr[data-user-id=\"${user.id}\"]`)).toBeVisible();",
        "    await expect(page.locator(`tr[data-user-id=\"${user.id}\"] .status`)).toContainText('Deleted');",
        "    ",
        "    // Restore user",
        "    await page.click(`button[data-restore=\"${user.id}\"]`);",
        "    await expect(page.locator('.toast-success')).toContainText('User restored successfully');",
        "    ",
        "    // Verify user is back in active list",
        "    await page.goto('/admin/users');",
        "    await expect(page.locator(`tr[data-user-id=\"${user.id}\"]`)).toBeVisible();",
        "  });",
        "});"
      ]
    }
  },
  "form_components": {
    "file_upload": {
      "description": "Testing file upload in forms",
      "code": [
        "test('file upload with preview', async ({ page }) => {",
        "  await page.goto('/admin/products/new');",
        "  ",
        "  // Upload single file",
        "  await page.setInputFiles('#product-image', 'test-assets/product.jpg');",
        "  ",
        "  // Verify preview appears",
        "  await expect(page.locator('.image-preview')).toBeVisible();",
        "  await expect(page.locator('.file-name')).toContainText('product.jpg');",
        "  await expect(page.locator('.file-size')).toContainText('2.5 MB');",
        "  ",
        "  // Remove file",
        "  await page.click('button.remove-file');",
        "  await expect(page.locator('.image-preview')).not.toBeVisible();",
        "  ",
        "  // Upload multiple files",
        "  await page.setInputFiles('#gallery-images', [",
        "    'test-assets/image1.jpg',",
        "    'test-assets/image2.jpg',",
        "    'test-assets/image3.jpg'",
        "  ]);",
        "  ",
        "  await expect(page.locator('.gallery-preview img')).toHaveCount(3);",
        "});",
        "",
        "test('drag and drop upload', async ({ page }) => {",
        "  await page.goto('/admin/documents/new');",
        "  ",
        "  // Create DataTransfer and dispatch events",
        "  await page.locator('.dropzone').dispatchEvent('drop', {",
        "    dataTransfer: await page.evaluateHandle(() => {",
        "      const dt = new DataTransfer();",
        "      const file = new File(['test content'], 'test.pdf', { type: 'application/pdf' });",
        "      dt.items.add(file);",
        "      return dt;",
        "    })",
        "  });",
        "  ",
        "  await expect(page.locator('.uploaded-file')).toContainText('test.pdf');",
        "});"
      ]
    },
    "dynamic_fields": {
      "description": "Testing dynamic form fields",
      "code": [
        "test('conditional fields', async ({ page }) => {",
        "  await page.goto('/admin/events/new');",
        "  ",
        "  // Online event - no location field",
        "  await page.selectOption('#event-type', 'online');",
        "  await expect(page.locator('#location')).not.toBeVisible();",
        "  await expect(page.locator('#meeting-url')).toBeVisible();",
        "  ",
        "  // In-person event - show location",
        "  await page.selectOption('#event-type', 'in-person');",
        "  await expect(page.locator('#location')).toBeVisible();",
        "  await expect(page.locator('#meeting-url')).not.toBeVisible();",
        "  ",
        "  // Hybrid event - show both",
        "  await page.selectOption('#event-type', 'hybrid');",
        "  await expect(page.locator('#location')).toBeVisible();",
        "  await expect(page.locator('#meeting-url')).toBeVisible();",
        "});",
        "",
        "test('dynamic field arrays', async ({ page }) => {",
        "  await page.goto('/admin/surveys/new');",
        "  ",
        "  // Add multiple questions",
        "  await page.click('button#add-question');",
        "  await page.fill('.question-input:nth-of-type(1)', 'Question 1');",
        "  ",
        "  await page.click('button#add-question');",
        "  await page.fill('.question-input:nth-of-type(2)', 'Question 2');",
        "  ",
        "  // Reorder questions",
        "  await page.dragAndDrop('.question-1 .drag-handle', '.question-2');",
        "  ",
        "  // Verify order changed",
        "  await expect(page.locator('.question-input').first()).toHaveValue('Question 2');",
        "  ",
        "  // Remove question",
        "  await page.click('.question-1 button.remove');",
        "  await expect(page.locator('.question-input')).toHaveCount(1);",
        "});"
      ]
    }
  },
  "best_practices": [
    "Use data-testid attributes for stable selectors",
    "Test form validation thoroughly",
    "Verify API calls match UI state",
    "Test error states and recovery",
    "Include accessibility testing for forms",
    "Test keyboard navigation",
    "Verify form state persistence",
    "Test concurrent editing scenarios",
    "Mock external dependencies appropriately",
    "Use realistic test data"
  ]
}